# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  source: source.yml
  commons: commons.yml
  connection: connection.yml
  pagination: pagination.yml
  destination: destination.yml
  attempt: attempt.yml

types:
  IssueId:
    type: string
    docs: Issue ID

  Issue:
    properties:
      id:
        docs: ID of the issue
        type: IssueId
      team_id:
        docs: ID of the workspace
        type: commons.TeamId
      type:
        docs: Issue type
        type: string
      status:
        docs: Current status
        type: IssueStatus
      aggregation_keys:
        docs: The keys on which the issue is aggregated
        type: AggregationKeys
      reference:
        docs: ID references to the object that opened the issue
        type: IssueReference
      last_updated_by:
        docs: ID of the team member who last updated the issue status
        type: datetime
      first_seen_at:
        docs: ISO timestamp for when the issue was first opened
        type: datetime
      last_seen_at:
        docs: ISO timestamp for when the issue last occured
        type: datetime
      dismissed_at:
        docs: ISO timestamp for when the issue was dismissed
        type: datetime
      opened_at:
        docs: ISO timestamp for when the issue was last opened
        type: datetime
      updated_at:
        docs: ISO timestamp for when the issue was last updated
        type: datetime
      created_at:
        docs: ISO timestamp for when the issue was created
        type: datetime
      data:
        docs: Expended data of the reference object. Only populated when retrieving a
          single issue and not a list
        type: IssueData

  IssueStatus:
    enum:
      - OPENED
      - ACKNOWLEDGED
      - RESOLVED
      - IGNORED

  AggregationKeys:
    properties:
      error_code: list<string>
      webhook_id:
        type: list<commons.ConnectionId>
        docs: Connection ID
      response_status:
        type: list<integer>
        docs: HTTP response code

  IssueReference:
    properties:
      event_id:
        docs: Event ID
        type: commons.EventId
      attempt_id:
        docs: Attempt ID
        type: attempt.AttemptId
      last_updated_by:
        docs: ISO timestamp for when the issue was last updated
        type: datetime
      first_seen_at:
        docs: ISO timestamp for when the issue was first seen
        type: datetime
      last_seen_at:
        docs: ISO timestamp for when the issue was last opened
        type: datetime
      dismissed_at:
        docs: ISO timestamp for when the issue was dismissed
        type: datetime
      opened_at:
        docs: ISO timestamp for when the issue was last opened
        type: datetime
      updated_at:
        docs: ISO timestamp for when the issue was last updated
        type: datetime
      created_at:
        docs: ISO timestamp for when the issue was created
        type: datetime

  AllIssues:
    extends: pagination.Pagination
    properties:
      count: integer
      models: list<Issue>

  IssueData:
    properties:
      trigger_event: TriggerIssue

  TriggerIssue:
    properties:
      id:
        docs: Event ID
        type: commons.EventId
      team_id:
        docs: ID of the Workspace
        type: commons.TeamId
      webhook_id:
        docs: Connection ID
        type: commons.ConnectionId
      source_id:
        docs: Source ID
        type: source.SourceId
      destination_id:
        docs: Destination ID
        type: destination.DestinationId
      attempts:
        docs: Number of attempts
        type: integer
      response_status:
        docs: HTTP code
        type: integer
      last_attempt_at:
        docs: ISO timestamp for when the issue was last attempted
        type: datetime
      next_attempt_at:
        docs: ISO timestamp for when the issue will be next attempted
        type: datetime
      successful_at:
        docs: ISO timestamp for when the issue was successful
        type: datetime
      updated_at:
        docs: ISO timestamp for when the issue was last updated
        type: datetime
      created_at:
        docs: ISO timestamp for when the issue was created
        type: datetime
      status:
        docs: Current status
        type: IssueStatus
      event_data_id:
        docs: ID of the request data
        type: commons.EventDataId
      cli_id:
        docs: ID of the CLI
        type: commons.CliId
      request:
        docs: The headers, body, and query of the request
        type: IssueRequest

  IssueRequest:
    properties:
      headers: IssueHeader
      body: IssueBody
      query: string
      parsed_query: unknown
      path: string

  IssueHeader:
    properties:
      content-length: string
      content-type: string

  IssueBody: unknown

service:
  docs: |
    Issues let you track problems in your workspace and communicate resolution steps with your team.
  base-path: /issues
  auth: true
  endpoints:
    getAll:
      method: GET
      path: ""
      response: AllIssues
      request:
        name: GetAllIssuesRequest
        query-parameters:
          id:
            docs: Filter by issue IDs
            type: optional<IssueId>
          type:
            docs: The issue type
            type: optional<string>
          status:
            docs: The issue status
            type: optional<IssueStatus>
          merged_with:
            docs: The issue ID it was merged with
            type: optional<IssueId>
          aggregation_keys:
            docs: JSON that will evaluate has a partial match of issue aggregation_keys
            type: optional<string> #TODO consider changing to unknown
          created_at:
            docs: Date the issues were created
            type: optional<datetime>
          first_seen_at:
            docs: Date the issues were first seen
            type: optional<datetime>
          last_seen_at:
            docs: Date the issues were last seen
            type: optional<datetime>
          dismissed_at:
            docs: Date the issues were dismissed
            type: optional<datetime>
          opened_at:
            docs: Date the issues were opened
            type: optional<datetime>
          order_by:
            docs: The date property to order by
            type: optional<string>
          dir:
            docs: The ordering direction
            type: optional<pagination.Direction>
          limit:
            docs: Limit the returned model count (max 250)
            type: optional<integer>

    get:
      method: GET
      path: /count
      response: integer
      request:
        name: GetIssueRequest
        query-parameters:
          id:
            docs: Filter by issue IDs
            type: optional<IssueId>
          type:
            docs: The issue type
            type: optional<string>
          status:
            docs: The issue status
            type: optional<IssueStatus>
          merged_with:
            docs: The issue ID it was merged with
            type: optional<IssueId>
          aggregation_keys:
            docs: JSON that will evaluate has a partial match of issue aggregation_keys
            type: optional<string> #TODO consider changing to unknown
          created_at:
            docs: Date the issues were created
            type: optional<datetime>
          first_seen_at:
            docs: Date the issues were first seen
            type: optional<datetime>
          last_seen_at:
            docs: Date the issues were last seen
            type: optional<datetime>
          dismissed_at:
            docs: Date the issues were dismissed
            type: optional<datetime>
          opened_at:
            docs: Date the issues were opened
            type: optional<datetime>
          order_by:
            docs: The date property to order by
            type: optional<string>
          dir:
            docs: The ordering direction
            type: optional<pagination.Direction>
          limit:
            docs: Limit the returned model count (max 250)
            type: optional<integer>

    retrieve:
      method: GET
      path: /{id}
      path-parameters:
        id:
          type: IssueId
          docs: Issue ID
      response: Issue

    update:
      method: PUT
      path: /{id}
      path-parameters:
        id:
          type: IssueId
          docs: Issue ID
      request:
        name: UpdateIssueRequest
        body:
          properties:
            status: IssueStatus
      response: Issue

    dismissIssue:
      method: DELETE
      path: /{id}
      path-parameters:
        id:
          type: IssueId
          docs: Issue ID
      response: Issue
