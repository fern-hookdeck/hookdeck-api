{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Hookdeck Admin REST API",
    "termsOfService": "https://hookdeck.com/terms",
    "contact": {
      "name": "Hookdeck Support",
      "url": "https://hookdeck.com/contact-us",
      "email": "info@hookdeck.com"
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": { "type": "http", "scheme": "bearer" },
      "basicAuth": { "type": "http", "scheme": "basic" }
    },
    "schemas": {
      "OrderByDirection": {
        "anyOf": [
          { "enum": ["asc"] },
          { "enum": ["desc"] },
          { "enum": ["ASC"] },
          { "enum": ["DESC"] }
        ]
      },
      "SeekPagination": {
        "type": "object",
        "properties": {
          "order_by": {
            "anyOf": [
              { "type": "string" },
              { "type": "array", "items": { "type": "string" } }
            ]
          },
          "dir": {
            "anyOf": [
              { "$ref": "#/components/schemas/OrderByDirection" },
              {
                "type": "array",
                "items": { "$ref": "#/components/schemas/OrderByDirection" }
              }
            ]
          },
          "limit": { "type": "integer" },
          "prev": { "type": "string" },
          "next": { "type": "string" }
        },
        "additionalProperties": false
      },
      "IssueType": {
        "type": "string",
        "enum": ["delivery", "transformation", "backpressure"],
        "description": "Issue type"
      },
      "IssueTriggerStrategy": {
        "type": "string",
        "enum": ["first_attempt", "final_attempt"],
        "description": "The strategy uses to open the issue"
      },
      "IssueTriggerDeliveryConfigs": {
        "type": "object",
        "properties": {
          "strategy": { "$ref": "#/components/schemas/IssueTriggerStrategy" },
          "connections": {
            "anyOf": [
              { "type": "string" },
              { "type": "array", "items": { "type": "string" } }
            ],
            "description": "A pattern to match on the connection name or array of connection IDs. Use `*` as wildcard.",
            "x-docs-force-simple-type": true
          }
        },
        "required": ["strategy", "connections"],
        "additionalProperties": false,
        "description": "Configurations for a 'delivery' issue trigger"
      },
      "TransformationExecutionLogLevel": {
        "type": "string",
        "enum": ["debug", "info", "warn", "error", "fatal"],
        "description": "The minimum log level to open the issue on"
      },
      "IssueTriggerTransformationConfigs": {
        "type": "object",
        "properties": {
          "log_level": {
            "$ref": "#/components/schemas/TransformationExecutionLogLevel"
          },
          "transformations": {
            "anyOf": [
              { "type": "string" },
              { "type": "array", "items": { "type": "string" } }
            ],
            "description": "A pattern to match on the transformation name or array of transformation IDs. Use `*` as wildcard.",
            "x-docs-force-simple-type": true
          }
        },
        "required": ["log_level", "transformations"],
        "additionalProperties": false,
        "description": "Configurations for a 'Transformation' issue trigger"
      },
      "IssueTriggerBackpressureDelay": {
        "type": "integer",
        "minimum": 60000,
        "maximum": 86400000,
        "description": "The minimum delay (backpressure) to open the issue for min of 1 minute (60000) and max of 1 day (86400000)",
        "x-docs-type": "integer"
      },
      "IssueTriggerBackpressureConfigs": {
        "type": "object",
        "properties": {
          "delay": {
            "$ref": "#/components/schemas/IssueTriggerBackpressureDelay"
          },
          "destinations": {
            "anyOf": [
              { "type": "string" },
              { "type": "array", "items": { "type": "string" } }
            ],
            "description": "A pattern to match on the destination name or array of destination IDs. Use `*` as wildcard.",
            "x-docs-force-simple-type": true
          }
        },
        "required": ["delay", "destinations"],
        "additionalProperties": false,
        "description": "Configurations for a 'Backpressure' issue trigger"
      },
      "IssueTriggerReference": {
        "anyOf": [
          { "$ref": "#/components/schemas/IssueTriggerDeliveryConfigs" },
          { "$ref": "#/components/schemas/IssueTriggerTransformationConfigs" },
          { "$ref": "#/components/schemas/IssueTriggerBackpressureConfigs" }
        ],
        "description": "Configuration object for the specific issue type selected"
      },
      "IssueTriggerSlackChannel": {
        "type": "object",
        "properties": {
          "channel_name": { "type": "string", "description": "Channel name" }
        },
        "required": ["channel_name"],
        "additionalProperties": false,
        "description": "Slack channel for an issue trigger",
        "x-docs-type": "object"
      },
      "IssueTriggerIntegrationChannel": {
        "type": "object",
        "properties": {},
        "additionalProperties": false,
        "description": "Integration channel for an issue trigger",
        "x-docs-type": "object"
      },
      "IssueTriggerEmailChannel": {
        "type": "object",
        "properties": {},
        "additionalProperties": false,
        "description": "Email channel for an issue trigger",
        "x-docs-type": "object"
      },
      "IssueTriggerChannels": {
        "type": "object",
        "properties": {
          "slack": { "$ref": "#/components/schemas/IssueTriggerSlackChannel" },
          "opsgenie": {
            "$ref": "#/components/schemas/IssueTriggerIntegrationChannel"
          },
          "email": { "$ref": "#/components/schemas/IssueTriggerEmailChannel" }
        },
        "additionalProperties": false,
        "nullable": true,
        "description": "Notification channels object for the specific channel type"
      },
      "IssueTrigger": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the issue trigger" },
          "team_id": {
            "type": "string",
            "nullable": true,
            "description": "ID of the workspace"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Optional unique name to use as reference when using the API"
          },
          "type": { "$ref": "#/components/schemas/IssueType" },
          "configs": { "$ref": "#/components/schemas/IssueTriggerReference" },
          "channels": { "$ref": "#/components/schemas/IssueTriggerChannels" },
          "disabled_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "ISO timestamp for when the issue trigger was disabled"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue trigger was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue trigger was created"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "ISO timestamp for when the issue trigger was deleted"
          }
        },
        "required": ["id", "type", "configs", "updated_at", "created_at"],
        "additionalProperties": false
      },
      "IssueTriggerPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/IssueTrigger" }
          }
        },
        "additionalProperties": false
      },
      "APIErrorResponse": {
        "type": "object",
        "properties": {
          "code": { "type": "string", "description": "Error code" },
          "status": {
            "type": "number",
            "format": "float",
            "description": "Status code"
          },
          "message": { "type": "string", "description": "Error description" },
          "data": { "type": "object", "properties": {}, "nullable": true }
        },
        "required": ["code", "status", "message"],
        "additionalProperties": false,
        "description": "Error response model"
      },
      "DeletedIssueTriggerResponse": {
        "type": "object",
        "properties": { "id": { "type": "string" } },
        "required": ["id"],
        "additionalProperties": false
      },
      "AttemptTrigger": {
        "type": "string",
        "enum": ["INITIAL", "MANUAL", "BULK_RETRY", "UNPAUSE", "AUTOMATIC"],
        "nullable": true,
        "description": "How the attempt was triggered"
      },
      "AttemptErrorCodes": {
        "type": "string",
        "enum": [
          "CANCELLED",
          "TIMEOUT",
          "NOT_FOUND",
          "CONNECTION_REFUSED",
          "CONNECTION_RESET",
          "MISSING_URL",
          "CLI",
          "CLI_UNAVAILABLE",
          "SELF_SIGNED_CERT",
          "ERR_TLS_CERT_ALTNAME_INVALID",
          "SSL_ERROR_CA_UNKNOWN",
          "TTL_EXPIRED",
          "DATA_ARCHIVED",
          "SSL_CERT_EXPIRED",
          "BULK_RETRY_CANCELLED",
          "DNS_LOOKUP_FAILED",
          "HOST_UNREACHABLE",
          "PROTOCOL_ERROR",
          "SOCKET_CLOSED",
          "UNKNOWN"
        ],
        "description": "Error code of the delivery attempt"
      },
      "AttemptStatus": {
        "type": "string",
        "enum": ["QUEUED", "FAILED", "SUCCESSFUL", "HOLD"],
        "description": "Attempt status"
      },
      "AttemptState": {
        "type": "string",
        "enum": ["DELIVERING", "QUEUED", "PENDING", "COMPLETED", "HOLD"],
        "nullable": true,
        "x-docs-hide": true
      },
      "EventAttempt": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Attempt ID" },
          "team_id": { "type": "string", "description": "Team ID" },
          "event_id": { "type": "string", "description": "Event ID" },
          "response_status": {
            "type": "integer",
            "nullable": true,
            "description": "Attempt's HTTP response code"
          },
          "attempt_number": {
            "type": "integer",
            "nullable": true,
            "description": "Sequential number of attempts (up to and including this one) made for the associated event"
          },
          "trigger": { "$ref": "#/components/schemas/AttemptTrigger" },
          "error_code": { "$ref": "#/components/schemas/AttemptErrorCodes" },
          "body": {
            "anyOf": [
              {
                "type": "object",
                "properties": {},
                "nullable": true,
                "description": "Response body from the destination"
              },
              {
                "type": "string",
                "nullable": true,
                "description": "Response body from the destination"
              }
            ]
          },
          "requested_url": {
            "type": "string",
            "nullable": true,
            "description": "URL of the destination where delivery was attempted"
          },
          "http_method": {
            "type": "string",
            "enum": ["GET", "POST", "PUT", "PATCH", "DELETE"],
            "nullable": true,
            "description": "HTTP method used to deliver the attempt"
          },
          "bulk_retry_id": {
            "type": "string",
            "nullable": true,
            "description": "ID of associated bulk retry"
          },
          "status": { "$ref": "#/components/schemas/AttemptStatus" },
          "successful_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date the attempt was successful"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date the attempt was delivered"
          },
          "responded_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date the destination responded to this attempt"
          },
          "delivery_latency": {
            "type": "integer",
            "nullable": true,
            "description": "Time elapsed between attempt initiation and final delivery (in ms)"
          },
          "response_latency": {
            "type": "integer",
            "nullable": true,
            "description": "Time elapsed between attempt initiation and a response from the destination (in ms)"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the attempt was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the attempt was created"
          },
          "state": { "$ref": "#/components/schemas/AttemptState" },
          "archived_at": {
            "type": "string",
            "nullable": true,
            "description": "Date the attempt was archived"
          },
          "destination_id": {
            "type": "string",
            "nullable": true,
            "x-docs-hide": true
          }
        },
        "required": [
          "id",
          "team_id",
          "event_id",
          "status",
          "updated_at",
          "created_at"
        ],
        "additionalProperties": false,
        "nullable": true
      },
      "EventAttemptPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EventAttempt" }
          }
        },
        "additionalProperties": false
      },
      "ShortEventData": {
        "type": "object",
        "properties": {
          "path": { "type": "string", "description": "Request path" },
          "query": {
            "type": "string",
            "nullable": true,
            "description": "Raw query param string"
          },
          "parsed_query": {
            "anyOf": [
              { "type": "string", "nullable": true },
              { "type": "object", "properties": {} }
            ],
            "nullable": true,
            "description": "JSON representation of query params"
          },
          "headers": {
            "anyOf": [
              { "type": "string" },
              {
                "type": "object",
                "properties": {},
                "additionalProperties": { "type": "string", "nullable": true }
              }
            ],
            "nullable": true,
            "description": "JSON representation of the headers"
          },
          "body": {
            "anyOf": [
              { "type": "string" },
              { "type": "object", "properties": {} },
              { "type": "array", "items": {} }
            ],
            "nullable": true,
            "description": "JSON or string representation of the body"
          },
          "is_large_payload": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether the payload is considered large payload and not searchable"
          }
        },
        "required": [
          "path",
          "query",
          "parsed_query",
          "headers",
          "body",
          "is_large_payload"
        ],
        "additionalProperties": false,
        "nullable": true,
        "description": "Request data"
      },
      "Bookmark": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the bookmark" },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "webhook_id": {
            "type": "string",
            "description": "ID of the associated connection"
          },
          "event_data_id": {
            "type": "string",
            "description": "ID of the bookmarked event data"
          },
          "label": {
            "type": "string",
            "description": "Descriptive name of the bookmark"
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "description": "Alternate alias for the bookmark"
          },
          "data": { "$ref": "#/components/schemas/ShortEventData" },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date the bookmark was last manually triggered"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the bookmark was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the bookmark was created"
          }
        },
        "required": [
          "id",
          "team_id",
          "webhook_id",
          "event_data_id",
          "label",
          "updated_at",
          "created_at"
        ],
        "additionalProperties": false
      },
      "BookmarkPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Bookmark" }
          }
        },
        "additionalProperties": false
      },
      "EventStatus": {
        "type": "string",
        "enum": ["SCHEDULED", "QUEUED", "HOLD", "SUCCESSFUL", "FAILED"]
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the event" },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "webhook_id": {
            "type": "string",
            "description": "ID of the associated connection"
          },
          "source_id": {
            "type": "string",
            "description": "ID of the associated source"
          },
          "destination_id": {
            "type": "string",
            "description": "ID of the associated destination"
          },
          "event_data_id": {
            "type": "string",
            "description": "ID of the event data"
          },
          "request_id": {
            "type": "string",
            "description": "ID of the request that created the event"
          },
          "attempts": {
            "type": "integer",
            "description": "Number of delivery attempts made"
          },
          "last_attempt_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of the most recently attempted retry"
          },
          "next_attempt_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of the next scheduled retry"
          },
          "response_status": {
            "type": "integer",
            "nullable": true,
            "description": "Event status"
          },
          "error_code": { "$ref": "#/components/schemas/AttemptErrorCodes" },
          "status": { "$ref": "#/components/schemas/EventStatus" },
          "successful_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of the latest successful attempt"
          },
          "cli_id": {
            "type": "string",
            "nullable": true,
            "description": "ID of the CLI the event is sent to"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the event was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the event was created"
          },
          "data": { "$ref": "#/components/schemas/ShortEventData" }
        },
        "required": [
          "id",
          "team_id",
          "webhook_id",
          "source_id",
          "destination_id",
          "event_data_id",
          "request_id",
          "attempts",
          "last_attempt_at",
          "next_attempt_at",
          "status",
          "successful_at",
          "cli_id",
          "updated_at",
          "created_at"
        ],
        "additionalProperties": false
      },
      "EventArray": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Event" }
      },
      "DeletedBookmarkResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Bookmark ID" }
        },
        "required": ["id"],
        "additionalProperties": false
      },
      "DestinationRateLimitPeriod": {
        "type": "string",
        "enum": ["second", "minute", "hour"],
        "nullable": true,
        "description": "Period to rate limit attempts",
        "default": "second"
      },
      "DestinationHTTPMethod": {
        "type": "string",
        "enum": ["GET", "POST", "PUT", "PATCH", "DELETE"],
        "nullable": true,
        "description": "HTTP method used on requests sent to the destination, overrides the method used on requests sent to the source."
      },
      "DestinationAuthMethodSignatureConfig": {
        "type": "object",
        "properties": {},
        "additionalProperties": false,
        "description": "Empty config for the destination's auth method"
      },
      "AuthHookdeckSignature": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["HOOKDECK_SIGNATURE"],
            "description": "Type of auth method"
          },
          "config": {
            "$ref": "#/components/schemas/DestinationAuthMethodSignatureConfig"
          }
        },
        "required": ["type"],
        "additionalProperties": false,
        "description": "Hookdeck Signature",
        "x-docs-type": "Hookdeck Signature"
      },
      "DestinationAuthMethodBasicAuthConfig": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username for basic auth"
          },
          "password": {
            "type": "string",
            "description": "Password for basic auth"
          }
        },
        "required": ["username", "password"],
        "additionalProperties": false,
        "description": "Basic auth config for the destination's auth method"
      },
      "AuthBasicAuth": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["BASIC_AUTH"],
            "description": "Type of auth method"
          },
          "config": {
            "$ref": "#/components/schemas/DestinationAuthMethodBasicAuthConfig"
          }
        },
        "required": ["type"],
        "additionalProperties": false,
        "description": "Basic Auth",
        "x-docs-type": "Basic Auth"
      },
      "DestinationAuthMethodApiKeyConfig": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for the API key auth"
          },
          "api_key": {
            "type": "string",
            "description": "API key for the API key auth"
          },
          "to": {
            "type": "string",
            "enum": ["header", "query"],
            "description": "Whether the API key should be sent as a header or a query parameter",
            "default": "header"
          }
        },
        "required": ["key", "api_key"],
        "additionalProperties": false,
        "description": "API key config for the destination's auth method"
      },
      "AuthAPIKey": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["API_KEY"],
            "description": "Type of auth method"
          },
          "config": {
            "$ref": "#/components/schemas/DestinationAuthMethodApiKeyConfig"
          }
        },
        "required": ["type"],
        "additionalProperties": false,
        "description": "API Key",
        "x-docs-type": "API Key"
      },
      "DestinationAuthMethodBearerTokenConfig": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token for the bearer token auth"
          }
        },
        "required": ["token"],
        "additionalProperties": false,
        "description": "Bearer token config for the destination's auth method"
      },
      "AuthBearerToken": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["BEARER_TOKEN"],
            "description": "Type of auth method"
          },
          "config": {
            "$ref": "#/components/schemas/DestinationAuthMethodBearerTokenConfig"
          }
        },
        "required": ["type"],
        "additionalProperties": false,
        "description": "Bearer Token",
        "x-docs-type": "Bearer Token"
      },
      "DestinationAuthMethodCustomSignatureConfig": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for the custom signature auth"
          },
          "signing_secret": {
            "type": "string",
            "description": "Signing secret for the custom signature auth. If left empty a secret will be generated for you."
          }
        },
        "required": ["key"],
        "additionalProperties": false,
        "description": "Custom signature config for the destination's auth method"
      },
      "AuthCustomSignature": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CUSTOM_SIGNATURE"],
            "description": "Type of auth method"
          },
          "config": {
            "$ref": "#/components/schemas/DestinationAuthMethodCustomSignatureConfig"
          }
        },
        "required": ["type", "config"],
        "additionalProperties": false,
        "description": "Custom Signature",
        "x-docs-type": "Custom Signature"
      },
      "DestinationAuthMethodConfig": {
        "anyOf": [
          { "$ref": "#/components/schemas/AuthHookdeckSignature" },
          { "$ref": "#/components/schemas/AuthBasicAuth" },
          { "$ref": "#/components/schemas/AuthAPIKey", "x-required": true },
          {
            "$ref": "#/components/schemas/AuthBearerToken",
            "x-required": true
          },
          { "$ref": "#/components/schemas/AuthCustomSignature" }
        ],
        "description": "Config for the destination's auth method"
      },
      "Destination": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the destination" },
          "name": {
            "type": "string",
            "description": "A unique, human-friendly name for the destination"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of the destination"
          },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "path_forwarding_disabled": { "type": "boolean", "nullable": true },
          "url": {
            "type": "string",
            "nullable": true,
            "description": "HTTP endpoint of the destination",
            "format": "URL"
          },
          "cli_path": {
            "type": "string",
            "nullable": true,
            "description": "Path for the CLI destination"
          },
          "rate_limit": {
            "type": "integer",
            "nullable": true,
            "description": "Limit event attempts to receive per period. Max value is workspace plan's max attempts thoughput."
          },
          "rate_limit_period": {
            "$ref": "#/components/schemas/DestinationRateLimitPeriod"
          },
          "http_method": {
            "$ref": "#/components/schemas/DestinationHTTPMethod"
          },
          "auth_method": {
            "$ref": "#/components/schemas/DestinationAuthMethodConfig"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date the destination was archived"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the destination was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the destination was created"
          }
        },
        "required": ["id", "name", "team_id", "updated_at", "created_at"],
        "additionalProperties": false,
        "description": "Associated [Destination](#destination-object) object"
      },
      "DestinationPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Destination" }
          }
        },
        "additionalProperties": false
      },
      "BatchOperation": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the bulk retry" },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "query": {
            "anyOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": { "nullable": true }
              },
              { "type": "string", "nullable": true }
            ],
            "nullable": true,
            "description": "Query object to filter records",
            "x-docs-force-simple-type": true,
            "x-docs-type": "JSON"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the bulk retry was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the bulk retry was updated"
          },
          "cancelled_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date the bulk retry was cancelled"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date the bulk retry was completed"
          },
          "estimated_batch": {
            "type": "integer",
            "nullable": true,
            "description": "Number of batches required to complete the bulk retry"
          },
          "estimated_count": {
            "type": "integer",
            "nullable": true,
            "description": "Number of estimated events to be retried"
          },
          "processed_batch": {
            "type": "integer",
            "nullable": true,
            "description": "Number of batches currently processed"
          },
          "completed_count": {
            "type": "integer",
            "nullable": true,
            "description": "Number of events that were successfully delivered"
          },
          "in_progress": {
            "type": "boolean",
            "description": "Indicates if the bulk retry is currently in progress"
          },
          "progress": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "Progression of the batch operations, values 0 - 1"
          },
          "failed_count": {
            "type": "integer",
            "nullable": true,
            "description": "Number of events that failed to be delivered"
          },
          "number": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "x-docs-hide": true
          }
        },
        "required": [
          "id",
          "team_id",
          "created_at",
          "updated_at",
          "in_progress"
        ],
        "additionalProperties": false
      },
      "BatchOperationPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BatchOperation" }
          }
        },
        "additionalProperties": false
      },
      "EventPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Event" }
          }
        },
        "additionalProperties": false
      },
      "RawBody": {
        "type": "object",
        "properties": { "body": { "type": "string" } },
        "required": ["body"],
        "additionalProperties": false
      },
      "RetriedEvent": {
        "type": "object",
        "properties": {
          "event": { "$ref": "#/components/schemas/Event" },
          "attempt": { "$ref": "#/components/schemas/EventAttempt" }
        },
        "required": ["event", "attempt"],
        "additionalProperties": false
      },
      "IntegrationProvider": {
        "type": "string",
        "enum": [
          "hmac",
          "basic_auth",
          "api_key",
          "twitter",
          "stripe",
          "recharge",
          "github",
          "shopify",
          "postmark",
          "typeform",
          "xero",
          "svix",
          "zoom",
          "akeneo",
          "adyen",
          "gitlab",
          "property-finder",
          "woocommerce",
          "oura",
          "commercelayer",
          "mailgun",
          "pipedrive",
          "sendgrid",
          "workos",
          "synctera",
          "aws_sns",
          "three_d_eye"
        ]
      },
      "IntegrationFeature": {
        "type": "string",
        "enum": ["VERIFICATION", "HANDSHAKE", "POLLING"]
      },
      "HMACAlgorithms": {
        "type": "string",
        "enum": ["md5", "sha1", "sha256", "sha512"]
      },
      "HMACIntegrationConfigs": {
        "type": "object",
        "properties": {
          "webhook_secret_key": { "type": "string" },
          "algorithm": { "$ref": "#/components/schemas/HMACAlgorithms" },
          "header_key": { "type": "string" },
          "encoding": { "type": "string", "enum": ["base64", "hex"] }
        },
        "required": [
          "webhook_secret_key",
          "algorithm",
          "header_key",
          "encoding"
        ],
        "additionalProperties": false
      },
      "APIKeyIntegrationConfigs": {
        "type": "object",
        "properties": {
          "header_key": { "type": "string" },
          "api_key": { "type": "string" }
        },
        "required": ["header_key", "api_key"],
        "additionalProperties": false
      },
      "HandledAPIKeyIntegrationConfigs": {
        "type": "object",
        "properties": { "api_key": { "type": "string" } },
        "required": ["api_key"],
        "additionalProperties": false
      },
      "HandledHMACConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false
      },
      "BasicAuthIntegrationConfigs": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "password": { "type": "string" }
        },
        "required": ["name", "password"],
        "additionalProperties": false
      },
      "ShopifyIntegrationConfigs": {
        "type": "object",
        "properties": {
          "webhook_secret_key": { "type": "string" },
          "rate_limit_period": {
            "type": "string",
            "enum": ["minute", "second"],
            "nullable": true
          },
          "rate_limit": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "api_key": { "type": "string", "nullable": true },
          "api_secret": { "type": "string", "nullable": true },
          "shop": { "type": "string", "nullable": true }
        },
        "required": ["webhook_secret_key"],
        "additionalProperties": false
      },
      "Integration": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the integration" },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "label": {
            "type": "string",
            "description": "Label of the integration"
          },
          "provider": { "$ref": "#/components/schemas/IntegrationProvider" },
          "features": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/IntegrationFeature" },
            "description": "List of features to enable (see features list below)",
            "x-docs-force-simple-type": true,
            "x-docs-type": "Array of string"
          },
          "configs": {
            "anyOf": [
              { "$ref": "#/components/schemas/HMACIntegrationConfigs" },
              { "$ref": "#/components/schemas/APIKeyIntegrationConfigs" },
              {
                "$ref": "#/components/schemas/HandledAPIKeyIntegrationConfigs"
              },
              { "$ref": "#/components/schemas/HandledHMACConfigs" },
              { "$ref": "#/components/schemas/BasicAuthIntegrationConfigs" },
              { "$ref": "#/components/schemas/ShopifyIntegrationConfigs" },
              {
                "type": "object",
                "properties": {},
                "additionalProperties": false
              }
            ],
            "description": "Decrypted Key/Value object of the associated configuration for that provider",
            "x-docs-force-simple-type": true,
            "x-docs-type": "object"
          },
          "sources": {
            "type": "array",
            "items": { "type": "string", "description": "ID of the source" },
            "description": "List of source IDs the integration is attached to"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the integration was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the integration was created"
          }
        },
        "required": [
          "id",
          "team_id",
          "label",
          "provider",
          "features",
          "configs",
          "sources",
          "updated_at",
          "created_at"
        ],
        "additionalProperties": false
      },
      "IntegrationPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Integration" }
          }
        },
        "additionalProperties": false
      },
      "AttachedIntegrationToSource": {
        "type": "object",
        "properties": { "success": { "type": "boolean" } },
        "required": ["success"],
        "additionalProperties": false
      },
      "DetachedIntegrationFromSource": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "DeletedIntegration": {
        "type": "object",
        "properties": { "id": { "type": "string" } },
        "required": ["id"],
        "additionalProperties": false
      },
      "IssueStatus": {
        "type": "string",
        "enum": ["OPENED", "IGNORED", "ACKNOWLEDGED", "RESOLVED"],
        "description": "Issue status"
      },
      "DeliveryIssueAggregationKeys": {
        "type": "object",
        "properties": {
          "webhook_id": { "type": "array", "items": { "type": "string" } },
          "response_status": {
            "type": "array",
            "items": { "type": "number", "format": "float" }
          },
          "error_code": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AttemptErrorCodes" }
          }
        },
        "required": ["webhook_id", "response_status", "error_code"],
        "additionalProperties": false,
        "description": "Keys used as the aggregation keys a 'delivery' type issue"
      },
      "DeliveryIssueReference": {
        "type": "object",
        "properties": {
          "event_id": { "type": "string" },
          "attempt_id": { "type": "string" }
        },
        "required": ["event_id", "attempt_id"],
        "additionalProperties": false,
        "description": "Reference to the event and attempt an issue is being created for."
      },
      "DeliveryIssueData": {
        "type": "object",
        "properties": {
          "trigger_event": { "$ref": "#/components/schemas/Event" },
          "trigger_attempt": { "$ref": "#/components/schemas/EventAttempt" }
        },
        "additionalProperties": false,
        "nullable": true,
        "description": "Delivery issue data"
      },
      "DeliveryIssueWithData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Issue ID",
            "example": "iss_YXKv5OdJXCiVwkPhGy"
          },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "status": { "$ref": "#/components/schemas/IssueStatus" },
          "opened_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue was last opened"
          },
          "first_seen_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue was first opened"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue last occured"
          },
          "last_updated_by": {
            "type": "string",
            "nullable": true,
            "description": "ID of the team member who last updated the issue status"
          },
          "dismissed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "ISO timestamp for when the issue was dismissed"
          },
          "auto_resolved_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "x-docs-hide": true
          },
          "merged_with": {
            "type": "string",
            "nullable": true,
            "x-docs-hide": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO timestamp for when the issue was last updated"
          },
          "created_at": {
            "type": "string",
            "description": "ISO timestamp for when the issue was created"
          },
          "type": { "type": "string", "enum": ["delivery"] },
          "aggregation_keys": {
            "$ref": "#/components/schemas/DeliveryIssueAggregationKeys"
          },
          "reference": {
            "$ref": "#/components/schemas/DeliveryIssueReference"
          },
          "data": { "$ref": "#/components/schemas/DeliveryIssueData" }
        },
        "required": [
          "id",
          "team_id",
          "status",
          "opened_at",
          "first_seen_at",
          "last_seen_at",
          "updated_at",
          "created_at",
          "type",
          "aggregation_keys",
          "reference"
        ],
        "additionalProperties": false,
        "description": "Delivery issue"
      },
      "TransformationIssueAggregationKeys": {
        "type": "object",
        "properties": {
          "transformation_id": {
            "type": "array",
            "items": { "type": "string" }
          },
          "log_level": {
            "$ref": "#/components/schemas/TransformationExecutionLogLevel"
          }
        },
        "required": ["transformation_id", "log_level"],
        "additionalProperties": false,
        "description": "Keys used as the aggregation keys a 'transformation' type issue"
      },
      "TransformationIssueReference": {
        "type": "object",
        "properties": {
          "transformation_execution_id": { "type": "string" },
          "trigger_event_request_transformation_id": {
            "type": "string",
            "nullable": true,
            "description": "Deprecated but still found on historical issues"
          }
        },
        "required": ["transformation_execution_id"],
        "additionalProperties": false,
        "description": "Reference to the event request transformation an issue is being created for."
      },
      "ConsoleLine": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["error", "log", "warn", "info", "debug"]
          },
          "message": { "type": "string" }
        },
        "required": ["type", "message"],
        "additionalProperties": false
      },
      "TransformationExecution": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "transformed_event_data_id": { "type": "string" },
          "original_event_data_id": { "type": "string" },
          "transformation_id": { "type": "string" },
          "team_id": { "type": "string" },
          "webhook_id": { "type": "string" },
          "log_level": {
            "$ref": "#/components/schemas/TransformationExecutionLogLevel"
          },
          "logs": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ConsoleLine" }
          },
          "updated_at": { "type": "string", "format": "date-time" },
          "created_at": { "type": "string", "format": "date-time" },
          "original_event_data": {
            "$ref": "#/components/schemas/ShortEventData"
          },
          "transformed_event_data": {
            "$ref": "#/components/schemas/ShortEventData"
          },
          "issue_id": { "type": "string", "nullable": true }
        },
        "required": [
          "id",
          "transformed_event_data_id",
          "original_event_data_id",
          "transformation_id",
          "team_id",
          "webhook_id",
          "log_level",
          "logs",
          "updated_at",
          "created_at"
        ],
        "additionalProperties": false
      },
      "TransformationIssueData": {
        "type": "object",
        "properties": {
          "transformation_execution": {
            "$ref": "#/components/schemas/TransformationExecution"
          },
          "trigger_attempt": { "$ref": "#/components/schemas/EventAttempt" }
        },
        "required": ["transformation_execution"],
        "additionalProperties": false,
        "nullable": true,
        "description": "Transformation issue data"
      },
      "TransformationIssueWithData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Issue ID",
            "example": "iss_YXKv5OdJXCiVwkPhGy"
          },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "status": { "$ref": "#/components/schemas/IssueStatus" },
          "opened_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue was last opened"
          },
          "first_seen_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue was first opened"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue last occured"
          },
          "last_updated_by": {
            "type": "string",
            "nullable": true,
            "description": "ID of the team member who last updated the issue status"
          },
          "dismissed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "ISO timestamp for when the issue was dismissed"
          },
          "auto_resolved_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "x-docs-hide": true
          },
          "merged_with": {
            "type": "string",
            "nullable": true,
            "x-docs-hide": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO timestamp for when the issue was last updated"
          },
          "created_at": {
            "type": "string",
            "description": "ISO timestamp for when the issue was created"
          },
          "type": { "type": "string", "enum": ["transformation"] },
          "aggregation_keys": {
            "$ref": "#/components/schemas/TransformationIssueAggregationKeys"
          },
          "reference": {
            "$ref": "#/components/schemas/TransformationIssueReference"
          },
          "data": { "$ref": "#/components/schemas/TransformationIssueData" }
        },
        "required": [
          "id",
          "team_id",
          "status",
          "opened_at",
          "first_seen_at",
          "last_seen_at",
          "updated_at",
          "created_at",
          "type",
          "aggregation_keys",
          "reference"
        ],
        "additionalProperties": false,
        "description": "Transformation issue"
      },
      "IssueWithData": {
        "anyOf": [
          { "$ref": "#/components/schemas/DeliveryIssueWithData" },
          { "$ref": "#/components/schemas/TransformationIssueWithData" }
        ]
      },
      "IssueWithDataPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/IssueWithData" }
          }
        },
        "additionalProperties": false
      },
      "IssueCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of issues",
            "example": 5
          }
        },
        "required": ["count"],
        "additionalProperties": false
      },
      "DeliveryIssue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Issue ID",
            "example": "iss_YXKv5OdJXCiVwkPhGy"
          },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "status": { "$ref": "#/components/schemas/IssueStatus" },
          "opened_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue was last opened"
          },
          "first_seen_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue was first opened"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue last occured"
          },
          "last_updated_by": {
            "type": "string",
            "nullable": true,
            "description": "ID of the team member who last updated the issue status"
          },
          "dismissed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "ISO timestamp for when the issue was dismissed"
          },
          "auto_resolved_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "x-docs-hide": true
          },
          "merged_with": {
            "type": "string",
            "nullable": true,
            "x-docs-hide": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO timestamp for when the issue was last updated"
          },
          "created_at": {
            "type": "string",
            "description": "ISO timestamp for when the issue was created"
          },
          "type": { "type": "string", "enum": ["delivery"] },
          "aggregation_keys": {
            "$ref": "#/components/schemas/DeliveryIssueAggregationKeys"
          },
          "reference": { "$ref": "#/components/schemas/DeliveryIssueReference" }
        },
        "required": [
          "id",
          "team_id",
          "status",
          "opened_at",
          "first_seen_at",
          "last_seen_at",
          "updated_at",
          "created_at",
          "type",
          "aggregation_keys",
          "reference"
        ],
        "additionalProperties": false,
        "description": "Delivery issue"
      },
      "TransformationIssue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Issue ID",
            "example": "iss_YXKv5OdJXCiVwkPhGy"
          },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "status": { "$ref": "#/components/schemas/IssueStatus" },
          "opened_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue was last opened"
          },
          "first_seen_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue was first opened"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp for when the issue last occured"
          },
          "last_updated_by": {
            "type": "string",
            "nullable": true,
            "description": "ID of the team member who last updated the issue status"
          },
          "dismissed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "ISO timestamp for when the issue was dismissed"
          },
          "auto_resolved_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "x-docs-hide": true
          },
          "merged_with": {
            "type": "string",
            "nullable": true,
            "x-docs-hide": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO timestamp for when the issue was last updated"
          },
          "created_at": {
            "type": "string",
            "description": "ISO timestamp for when the issue was created"
          },
          "type": { "type": "string", "enum": ["transformation"] },
          "aggregation_keys": {
            "$ref": "#/components/schemas/TransformationIssueAggregationKeys"
          },
          "reference": {
            "$ref": "#/components/schemas/TransformationIssueReference"
          }
        },
        "required": [
          "id",
          "team_id",
          "status",
          "opened_at",
          "first_seen_at",
          "last_seen_at",
          "updated_at",
          "created_at",
          "type",
          "aggregation_keys",
          "reference"
        ],
        "additionalProperties": false,
        "description": "Transformation issue"
      },
      "Issue": {
        "anyOf": [
          { "$ref": "#/components/schemas/DeliveryIssue" },
          { "$ref": "#/components/schemas/TransformationIssue" }
        ],
        "description": "Issue"
      },
      "RequestRejectionCause": {
        "type": "string",
        "enum": [
          "SOURCE_ARCHIVED",
          "NO_WEBHOOK",
          "VERIFICATION_FAILED",
          "UNSUPPORTED_HTTP_METHOD",
          "UNSUPPORTED_CONTENT_TYPE",
          "UNPARSABLE_JSON",
          "PAYLOAD_TOO_LARGE",
          "INGESTION_FATAL",
          "UNKNOWN"
        ],
        "x-docs-type": "string"
      },
      "Request": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the request" },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "verified": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether or not the request was verified when received"
          },
          "original_event_data_id": {
            "type": "string",
            "nullable": true,
            "description": "ID of the request data"
          },
          "rejection_cause": {
            "$ref": "#/components/schemas/RequestRejectionCause"
          },
          "ingest_priority": {
            "type": "string",
            "enum": ["NORMAL", "LOW"],
            "nullable": true,
            "description": "The priority attributed to the request when received"
          },
          "ingested_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The time the request was originally received"
          },
          "source_id": {
            "type": "string",
            "description": "ID of the associated source"
          },
          "events_count": {
            "type": "integer",
            "nullable": true,
            "description": "The count of events created from this request (CLI events not included)"
          },
          "cli_events_count": {
            "type": "integer",
            "nullable": true,
            "description": "The count of CLI events created from this request"
          },
          "ignored_count": {
            "type": "integer",
            "nullable": true,
            "x-docs-hide": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the event was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "\tDate the event was created"
          },
          "data": { "$ref": "#/components/schemas/ShortEventData" }
        },
        "required": [
          "id",
          "team_id",
          "verified",
          "original_event_data_id",
          "rejection_cause",
          "ingest_priority",
          "ingested_at",
          "source_id",
          "events_count",
          "cli_events_count",
          "ignored_count",
          "updated_at",
          "created_at"
        ],
        "additionalProperties": false
      },
      "RequestPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Request" }
          }
        },
        "additionalProperties": false
      },
      "RetryRequest": {
        "type": "object",
        "properties": {
          "request": { "$ref": "#/components/schemas/Request" },
          "events": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Event" },
            "nullable": true
          }
        },
        "required": ["request"],
        "additionalProperties": false
      },
      "IgnoredEventCause": {
        "type": "string",
        "enum": [
          "ARCHIVED",
          "FILTERED",
          "TRANSFORMATION_FAILED",
          "CLI_DISCONNECTED"
        ]
      },
      "FilteredMeta": {
        "type": "string",
        "enum": ["body", "headers", "path", "query"]
      },
      "TransformationFailedMeta": {
        "type": "object",
        "properties": { "transformation_id": { "type": "string" } },
        "required": ["transformation_id"],
        "additionalProperties": false
      },
      "IgnoredEvent": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "team_id": { "type": "string" },
          "webhook_id": { "type": "string" },
          "cause": { "$ref": "#/components/schemas/IgnoredEventCause" },
          "request_id": { "type": "string" },
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/FilteredMeta" },
              { "$ref": "#/components/schemas/TransformationFailedMeta" }
            ],
            "nullable": true
          },
          "updated_at": { "type": "string", "format": "date-time" },
          "created_at": { "type": "string", "format": "date-time" }
        },
        "required": [
          "id",
          "team_id",
          "webhook_id",
          "cause",
          "request_id",
          "updated_at",
          "created_at"
        ],
        "additionalProperties": false
      },
      "IgnoredEventPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/IgnoredEvent" }
          }
        },
        "additionalProperties": false
      },
      "VerificationHMACConfigs": {
        "type": "object",
        "properties": {
          "webhook_secret_key": { "type": "string" },
          "algorithm": { "$ref": "#/components/schemas/HMACAlgorithms" },
          "header_key": { "type": "string" },
          "encoding": { "type": "string", "enum": ["base64", "hex"] }
        },
        "required": [
          "webhook_secret_key",
          "algorithm",
          "header_key",
          "encoding"
        ],
        "additionalProperties": false,
        "description": "The verification configs for HMAC. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationHMAC": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["hmac"] },
          "configs": { "$ref": "#/components/schemas/VerificationHMACConfigs" }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationBasicAuthConfigs": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "password": { "type": "string" }
        },
        "required": ["name", "password"],
        "additionalProperties": false,
        "description": "The verification configs for Basic Auth. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationBasicAuth": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["basic_auth"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationBasicAuthConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationAPIKeyConfigs": {
        "type": "object",
        "properties": {
          "header_key": { "type": "string" },
          "api_key": { "type": "string" }
        },
        "required": ["header_key", "api_key"],
        "additionalProperties": false,
        "description": "The verification configs for API Key. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationAPIKey": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["api_key"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationAPIKeyConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationTwitterConfigs": {
        "type": "object",
        "properties": { "api_key": { "type": "string" } },
        "required": ["api_key"],
        "additionalProperties": false,
        "description": "The verification configs for Twitter. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationTwitter": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["twitter"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationTwitterConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationStripeConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Stripe. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationStripe": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["stripe"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationStripeConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationRechargeConfigs": {
        "type": "object",
        "properties": {
          "webhook_secret_key": { "type": "string" },
          "algorithm": { "$ref": "#/components/schemas/HMACAlgorithms" },
          "header_key": { "type": "string" },
          "encoding": { "type": "string", "enum": ["base64", "hex"] }
        },
        "required": [
          "webhook_secret_key",
          "algorithm",
          "header_key",
          "encoding"
        ],
        "additionalProperties": false,
        "description": "The verification configs for Recharge. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationRecharge": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["recharge"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationRechargeConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationGitHubConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for GitHub. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationGitHub": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["github"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationGitHubConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationShopifyConfigs": {
        "type": "object",
        "properties": {
          "webhook_secret_key": { "type": "string" },
          "rate_limit_period": {
            "type": "string",
            "enum": ["minute", "second"],
            "nullable": true
          },
          "rate_limit": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "api_key": { "type": "string", "nullable": true },
          "api_secret": { "type": "string", "nullable": true },
          "shop": { "type": "string", "nullable": true }
        },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Shopify. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationShopify": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["shopify"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationShopifyConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationPostmarkConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Postmark. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationPostmark": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["postmark"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationPostmarkConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationTypeformConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Typeform. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationTypeform": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["typeform"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationTypeformConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationXeroConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Xero. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationXero": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["xero"] },
          "configs": { "$ref": "#/components/schemas/VerificationXeroConfigs" }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationSvixConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Svix. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationSvix": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["svix"] },
          "configs": { "$ref": "#/components/schemas/VerificationSvixConfigs" }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationZoomConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Zoom. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationZoom": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["zoom"] },
          "configs": { "$ref": "#/components/schemas/VerificationZoomConfigs" }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationAkeneoConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Akeneo. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationAkeneo": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["akeneo"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationAkeneoConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationAdyenConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Adyen. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationAdyen": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["adyen"] },
          "configs": { "$ref": "#/components/schemas/VerificationAdyenConfigs" }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationGitLabConfigs": {
        "type": "object",
        "properties": { "api_key": { "type": "string" } },
        "required": ["api_key"],
        "additionalProperties": false,
        "description": "The verification configs for GitLab. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationGitLab": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["gitlab"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationGitLabConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationPropertyFinderConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Property Finder. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationPropertyFinder": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["property-finder"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationPropertyFinderConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationWooCommerceConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for WooCommerce. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationWooCommerce": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["woocommerce"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationWooCommerceConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationOuraConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Oura. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationOura": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["oura"] },
          "configs": { "$ref": "#/components/schemas/VerificationOuraConfigs" }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationCommercelayerConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Commercelayer. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationCommercelayer": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["commercelayer"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationCommercelayerConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationMailgunConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Mailgun. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationMailgun": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["mailgun"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationMailgunConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationPipedriveConfigs": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "password": { "type": "string" }
        },
        "required": ["name", "password"],
        "additionalProperties": false,
        "description": "The verification configs for Pipedrive. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationPipedrive": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["pipedrive"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationPipedriveConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationSendGridConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for SendGrid. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationSendGrid": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["sendgrid"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationSendGridConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationWorkOSConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for WorkOS. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationWorkOS": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["workos"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationWorkOSConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationSyncteraConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for Synctera. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationSynctera": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["synctera"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationSyncteraConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationAWSSNSConfigs": {
        "type": "object",
        "properties": {},
        "additionalProperties": false,
        "description": "The verification configs for AWS SNS. Only included if the ?include=verification.configs query param is present"
      },
      "VerificationAWSSNS": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["aws_sns"] },
          "configs": {
            "$ref": "#/components/schemas/VerificationAWSSNSConfigs"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "Verification3dEyeConfigs": {
        "type": "object",
        "properties": { "webhook_secret_key": { "type": "string" } },
        "required": ["webhook_secret_key"],
        "additionalProperties": false,
        "description": "The verification configs for 3dEye. Only included if the ?include=verification.configs query param is present"
      },
      "Verification3dEye": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["three_d_eye"] },
          "configs": { "$ref": "#/components/schemas/Verification3dEyeConfigs" }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "VerificationConfig": {
        "oneOf": [
          { "$ref": "#/components/schemas/VerificationHMAC" },
          { "$ref": "#/components/schemas/VerificationBasicAuth" },
          { "$ref": "#/components/schemas/VerificationAPIKey" },
          { "$ref": "#/components/schemas/VerificationTwitter" },
          { "$ref": "#/components/schemas/VerificationStripe" },
          { "$ref": "#/components/schemas/VerificationRecharge" },
          { "$ref": "#/components/schemas/VerificationGitHub" },
          { "$ref": "#/components/schemas/VerificationShopify" },
          { "$ref": "#/components/schemas/VerificationPostmark" },
          { "$ref": "#/components/schemas/VerificationTypeform" },
          { "$ref": "#/components/schemas/VerificationXero" },
          { "$ref": "#/components/schemas/VerificationSvix" },
          { "$ref": "#/components/schemas/VerificationZoom" },
          { "$ref": "#/components/schemas/VerificationAkeneo" },
          { "$ref": "#/components/schemas/VerificationAdyen" },
          { "$ref": "#/components/schemas/VerificationGitLab" },
          { "$ref": "#/components/schemas/VerificationPropertyFinder" },
          { "$ref": "#/components/schemas/VerificationWooCommerce" },
          { "$ref": "#/components/schemas/VerificationOura" },
          { "$ref": "#/components/schemas/VerificationCommercelayer" },
          { "$ref": "#/components/schemas/VerificationMailgun" },
          { "$ref": "#/components/schemas/VerificationPipedrive" },
          { "$ref": "#/components/schemas/VerificationSendGrid" },
          { "$ref": "#/components/schemas/VerificationWorkOS" },
          { "$ref": "#/components/schemas/VerificationSynctera" },
          { "$ref": "#/components/schemas/VerificationAWSSNS" },
          { "$ref": "#/components/schemas/Verification3dEye" }
        ],
        "nullable": true,
        "description": "The verification configs for the specific verification type"
      },
      "SourceAllowedHTTPMethod": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": ["GET", "POST", "PUT", "PATCH", "DELETE"]
        },
        "nullable": true,
        "description": "List of allowed HTTP methods. Defaults to PUT, POST, PATCH, DELETE."
      },
      "SourceCustomResponseContentType": {
        "type": "string",
        "enum": ["json", "text", "xml"],
        "description": "Content type of the custom response"
      },
      "SourceCustomResponse": {
        "type": "object",
        "properties": {
          "content_type": {
            "$ref": "#/components/schemas/SourceCustomResponseContentType"
          },
          "body": {
            "type": "string",
            "maxLength": 1000,
            "description": "Body of the custom response"
          }
        },
        "required": ["content_type", "body"],
        "additionalProperties": false,
        "nullable": true,
        "description": "Custom response object"
      },
      "Source": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the source" },
          "name": { "type": "string", "description": "Name for the source" },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of the source"
          },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "url": {
            "type": "string",
            "description": "A unique URL that must be supplied to your webhook's provider",
            "format": "URL"
          },
          "verification": { "$ref": "#/components/schemas/VerificationConfig" },
          "allowed_http_methods": {
            "$ref": "#/components/schemas/SourceAllowedHTTPMethod"
          },
          "custom_response": {
            "$ref": "#/components/schemas/SourceCustomResponse"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date the source was archived"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the source was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the source was created"
          }
        },
        "required": [
          "id",
          "name",
          "team_id",
          "url",
          "updated_at",
          "created_at"
        ],
        "additionalProperties": false,
        "description": "Associated [Source](#source-object) object"
      },
      "SourcePaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Source" }
          }
        },
        "additionalProperties": false
      },
      "TopicsValue": {
        "type": "string",
        "enum": [
          "issue.opened",
          "issue.updated",
          "deprecated.attempt-failed",
          "event.successful"
        ],
        "description": "Supported topics",
        "x-docs-type": "string"
      },
      "ToggleWebhookNotifications": {
        "type": "object",
        "properties": {
          "enabled": { "type": "boolean" },
          "topics": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TopicsValue" },
            "nullable": true
          },
          "source_id": { "type": "string" }
        },
        "required": ["enabled", "source_id"],
        "additionalProperties": false
      },
      "AddCustomHostname": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The custom hostname to attach to the workspace"
          }
        },
        "required": ["hostname"],
        "additionalProperties": false
      },
      "DeleteCustomDomainSchema": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "The custom hostname ID" }
        },
        "required": ["id"],
        "additionalProperties": false
      },
      "ListCustomDomainSchema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": { "type": "string" },
            "hostname": { "type": "string" },
            "status": { "type": "string" },
            "ssl": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "type": { "type": "string" },
                "method": { "type": "string" },
                "status": { "type": "string" },
                "txt_name": { "type": "string" },
                "txt_value": { "type": "string" },
                "validation_records": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "status": { "type": "string" },
                      "txt_name": { "type": "string" },
                      "txt_value": { "type": "string" }
                    },
                    "additionalProperties": false
                  }
                },
                "dcv_delegation_records": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cname": { "type": "string" },
                      "cname_target": { "type": "string" }
                    },
                    "additionalProperties": false
                  }
                },
                "settings": {
                  "type": "object",
                  "properties": { "min_tls_version": { "type": "string" } },
                  "additionalProperties": false
                },
                "bundle_method": { "type": "string" },
                "wildcard": { "type": "boolean" },
                "certificate_authority": { "type": "string" }
              },
              "additionalProperties": false
            },
            "verification_errors": {
              "type": "array",
              "items": { "type": "string" }
            },
            "ownership_verification": {
              "type": "object",
              "properties": {
                "type": { "type": "string" },
                "name": { "type": "string" },
                "value": { "type": "string" }
              },
              "additionalProperties": false
            },
            "created_at": { "type": "string" }
          },
          "additionalProperties": false
        }
      },
      "Transformation": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the transformation" },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "name": {
            "type": "string",
            "description": "A unique, human-friendly name for the transformation"
          },
          "code": {
            "type": "string",
            "description": "JavaScript code to be executed"
          },
          "encrypted_env": {
            "type": "string",
            "nullable": true,
            "x-docs-hide": true
          },
          "iv": { "type": "string", "nullable": true, "x-docs-hide": true },
          "env": {
            "type": "object",
            "properties": {},
            "additionalProperties": { "type": "string" },
            "nullable": true,
            "description": "Key-value environment variables to be passed to the transformation",
            "x-docs-force-simple-type": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the transformation was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the transformation was created"
          }
        },
        "required": [
          "id",
          "team_id",
          "name",
          "code",
          "updated_at",
          "created_at"
        ],
        "additionalProperties": false
      },
      "TransformationPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Transformation" }
          }
        },
        "additionalProperties": false
      },
      "TransformationExecutorOutput": {
        "type": "object",
        "properties": {
          "request_id": { "type": "string", "nullable": true },
          "transformation_id": { "type": "string", "nullable": true },
          "execution_id": { "type": "string", "nullable": true },
          "log_level": {
            "$ref": "#/components/schemas/TransformationExecutionLogLevel"
          },
          "request": {
            "type": "object",
            "properties": {
              "headers": {
                "anyOf": [
                  { "type": "string" },
                  {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": { "nullable": true }
                  }
                ],
                "nullable": true
              },
              "path": { "type": "string" },
              "query": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "nullable": true
                  },
                  { "type": "string" }
                ],
                "nullable": true
              },
              "parsed_query": {
                "anyOf": [
                  { "type": "string", "nullable": true },
                  {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  }
                ],
                "nullable": true
              },
              "body": {
                "anyOf": [
                  { "type": "string", "nullable": true },
                  {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  }
                ],
                "nullable": true
              }
            },
            "required": ["path"],
            "additionalProperties": false,
            "nullable": true
          },
          "console": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ConsoleLine" },
            "nullable": true
          }
        },
        "required": ["log_level"],
        "additionalProperties": false
      },
      "TransformationExecutionPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TransformationExecution" }
          }
        },
        "additionalProperties": false
      },
      "RetryStrategy": {
        "type": "string",
        "enum": ["linear", "exponential"],
        "description": "Algorithm to use when calculating delay between retries"
      },
      "RetryRule": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["retry"],
            "description": "A retry rule must be of type `retry`"
          },
          "strategy": { "$ref": "#/components/schemas/RetryStrategy" },
          "interval": {
            "type": "integer",
            "nullable": true,
            "description": "Time in MS between each retry"
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "Maximum number of retries to attempt"
          }
        },
        "required": ["type", "strategy"],
        "additionalProperties": false
      },
      "FilterRuleProperty": {
        "anyOf": [
          {
            "type": "string",
            "nullable": true,
            "x-fern-type-name": "FilterRulePropertyString"
          },
          {
            "type": "number",
            "format": "float",
            "x-fern-type-name": "FilterRulePropertyNumber",
            "nullable": true
          },
          {
            "type": "boolean",
            "x-fern-type-name": "FilterRulePropertyBoolean",
            "nullable": true
          },
          {
            "type": "object",
            "properties": {},
            "x-fern-type-name": "FilterRulePropertyJSON",
            "additionalProperties": true,
            "nullable": true
          }
        ],
        "nullable": true,
        "description": "JSON using our filter syntax to filter on request headers",
        "x-docs-type": "JSON",
        "x-docs-force-simple-type": true
      },
      "FilterRule": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["filter"],
            "description": "A filter rule must be of type `filter`"
          },
          "headers": { "$ref": "#/components/schemas/FilterRuleProperty" },
          "body": { "$ref": "#/components/schemas/FilterRuleProperty" },
          "query": { "$ref": "#/components/schemas/FilterRuleProperty" },
          "path": { "$ref": "#/components/schemas/FilterRuleProperty" }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "TransformReference": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["transform"],
            "description": "A transformation rule must be of type `transformation`"
          },
          "transformation_id": {
            "type": "string",
            "description": "ID of the attached transformation object. Optional input, always set once the rule is defined"
          }
        },
        "required": ["type", "transformation_id"],
        "additionalProperties": false
      },
      "TransformFull": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["transform"],
            "description": "A transformation rule must be of type `transformation`"
          },
          "transformation_id": {
            "type": "string",
            "nullable": true,
            "description": "ID of the attached transformation object. Optional input, always set once the rule is defined"
          },
          "transformation": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The unique name of the transformation"
              },
              "code": {
                "type": "string",
                "description": "A string representation of your JavaScript (ES6) code to run"
              },
              "env": {
                "type": "object",
                "properties": {},
                "additionalProperties": { "type": "string" },
                "nullable": true,
                "description": "A key-value object of environment variables to encrypt and expose to your transformation code"
              }
            },
            "required": ["name", "code"],
            "additionalProperties": false,
            "description": "You can optionally define a new transformation while creating a transform rule"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      "TransformRule": {
        "anyOf": [
          { "$ref": "#/components/schemas/TransformReference" },
          { "$ref": "#/components/schemas/TransformFull" }
        ]
      },
      "DelayRule": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["delay"],
            "description": "A delay rule must be of type `delay`"
          },
          "delay": {
            "type": "integer",
            "description": "Delay to introduce in MS"
          }
        },
        "required": ["type", "delay"],
        "additionalProperties": false
      },
      "Rule": {
        "anyOf": [
          { "$ref": "#/components/schemas/RetryRule" },
          { "$ref": "#/components/schemas/FilterRule" },
          { "$ref": "#/components/schemas/TransformRule" },
          { "$ref": "#/components/schemas/DelayRule" }
        ]
      },
      "Connection": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "ID of the connection" },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Unique name of the connection for this source"
          },
          "full_name": {
            "type": "string",
            "nullable": true,
            "description": "Full name of the connection concatenated from source, connection and desitnation name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of the connection"
          },
          "team_id": { "type": "string", "description": "ID of the workspace" },
          "destination": { "$ref": "#/components/schemas/Destination" },
          "source": { "$ref": "#/components/schemas/Source" },
          "rules": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Rule" },
            "nullable": true,
            "description": "Array of rules configured on the connection"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date the connection was archived"
          },
          "paused_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date the connection was paused"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the connection was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the connection was created"
          }
        },
        "required": [
          "id",
          "name",
          "full_name",
          "description",
          "team_id",
          "destination",
          "source",
          "rules",
          "archived_at",
          "paused_at",
          "updated_at",
          "created_at"
        ],
        "additionalProperties": false
      },
      "ConnectionPaginatedResult": {
        "type": "object",
        "properties": {
          "pagination": { "$ref": "#/components/schemas/SeekPagination" },
          "count": { "type": "integer" },
          "models": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Connection" }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "servers": [
    {
      "url": "https://api.hookdeck.com/2023-07-01",
      "description": "Production API"
    }
  ],
  "security": [{ "bearerAuth": [] }, { "basicAuth": [] }],
  "tags": [
    {
      "name": "Issue Triggers",
      "description": "Issue Triggers lets you setup rules that trigger issues when certain conditions are met."
    },
    {
      "name": "Attempts",
      "description": "An attempt is any request that Hookdeck makes on behalf of an event."
    },
    {
      "name": "Bookmarks",
      "description": "A bookmark lets you conveniently store and replay a specific request."
    },
    {
      "name": "Destinations",
      "description": "A destination is any endpoint to which your webhooks can be routed."
    },
    { "name": "Bulk retry events", "description": "" },
    {
      "name": "Events",
      "description": "An event is any request that Hookdeck receives from a source."
    },
    { "name": "Bulk retry ignored events", "description": "" },
    {
      "name": "Integrations",
      "description": "An integration configures platform-specific behaviors, such as signature verification."
    },
    {
      "name": "Issues",
      "description": "Issues lets you track problems in your workspace and communicate resolution steps with your team."
    },
    {
      "name": "Requests",
      "description": "A request represent a webhook received by Hookdeck."
    },
    { "name": "Bulk retry requests", "description": "" },
    {
      "name": "Sources",
      "description": "A source represents any third party that sends webhooks to Hookdeck."
    },
    {
      "name": "Notifications",
      "description": "Notifications let your team receive alerts anytime an issue changes."
    },
    {
      "name": "Transformations",
      "description": "A transformation represents JavaScript code that will be executed on a connection's requests. Transformations are applied to connections using Rules."
    },
    {
      "name": "Connections",
      "description": "A connection lets you route webhooks from a source to a destination, using a ruleset."
    }
  ],
  "paths": {
    "/issue-triggers": {
      "get": {
        "operationId": "getIssueTriggers",
        "summary": "Get issue triggers",
        "description": "",
        "tags": ["Issue Triggers"],
        "responses": {
          "200": {
            "description": "List of issue triggers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTriggerPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "Filter by issue trigger name"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": { "$ref": "#/components/schemas/IssueType" }
          },
          {
            "in": "query",
            "name": "disabled_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Date when the issue trigger was disabled"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "enum": ["created_at", "type"]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at", "type"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "issueTrigger",
        "x-fern-sdk-method-name": "list"
      },
      "post": {
        "operationId": "createIssueTrigger",
        "summary": "Create an issue trigger",
        "description": "",
        "tags": ["Issue Triggers"],
        "responses": {
          "200": {
            "description": "A single issue trigger",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IssueTrigger" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "issueTrigger",
        "x-fern-sdk-method-name": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": { "$ref": "#/components/schemas/IssueType" },
                  "configs": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/IssueTriggerDeliveryConfigs"
                      },
                      {
                        "$ref": "#/components/schemas/IssueTriggerTransformationConfigs"
                      },
                      {
                        "$ref": "#/components/schemas/IssueTriggerBackpressureConfigs"
                      }
                    ],
                    "description": "Configuration object for the specific issue type selected"
                  },
                  "channels": {
                    "$ref": "#/components/schemas/IssueTriggerChannels"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "nullable": true,
                    "description": "Optional unique name to use as reference when using the API"
                  }
                },
                "required": ["type", "channels"],
                "additionalProperties": false
              }
            }
          }
        }
      },
      "put": {
        "operationId": "upsertIssueTrigger",
        "summary": "Create or update an issue trigger",
        "description": "",
        "tags": ["Issue Triggers"],
        "responses": {
          "200": {
            "description": "A single issue trigger",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IssueTrigger" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "issueTrigger",
        "x-fern-sdk-method-name": "upsert",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": { "$ref": "#/components/schemas/IssueType" },
                  "configs": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/IssueTriggerDeliveryConfigs"
                      },
                      {
                        "$ref": "#/components/schemas/IssueTriggerTransformationConfigs"
                      },
                      {
                        "$ref": "#/components/schemas/IssueTriggerBackpressureConfigs"
                      }
                    ],
                    "description": "Configuration object for the specific issue type selected"
                  },
                  "channels": {
                    "$ref": "#/components/schemas/IssueTriggerChannels"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Required unique name to use as reference when using the API"
                  }
                },
                "required": ["type", "channels", "name"],
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/issue-triggers/{id}": {
      "get": {
        "operationId": "getIssueTrigger",
        "summary": "Get a single issue trigger",
        "description": "",
        "tags": ["Issue Triggers"],
        "responses": {
          "200": {
            "description": "A single issue trigger",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IssueTrigger" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Issue trigger ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "issueTrigger",
        "x-fern-sdk-method-name": "retrieve"
      },
      "put": {
        "operationId": "updateIssueTrigger",
        "summary": "Update an issue trigger",
        "description": "",
        "tags": ["Issue Triggers"],
        "responses": {
          "200": {
            "description": "A single issue trigger",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IssueTrigger" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Issue trigger ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "issueTrigger",
        "x-fern-sdk-method-name": "update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "configs": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/IssueTriggerDeliveryConfigs"
                      },
                      {
                        "$ref": "#/components/schemas/IssueTriggerTransformationConfigs"
                      },
                      {
                        "$ref": "#/components/schemas/IssueTriggerBackpressureConfigs"
                      }
                    ],
                    "description": "Configuration object for the specific issue type selected"
                  },
                  "channels": {
                    "$ref": "#/components/schemas/IssueTriggerChannels"
                  },
                  "disabled_at": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "description": "Date when the issue trigger was disabled"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "nullable": true,
                    "description": "Optional unique name to use as reference when using the API"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteIssueTrigger",
        "summary": "Delete an issue trigger",
        "description": "",
        "tags": ["Issue Triggers"],
        "responses": {
          "200": {
            "description": "An object with deleted issue trigger's id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedIssueTriggerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Issue trigger ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "issueTrigger",
        "x-fern-sdk-method-name": "delete"
      }
    },
    "/issue-triggers/{id}/disable": {
      "put": {
        "operationId": "disableIssueTrigger",
        "summary": "Disable an issue trigger",
        "description": "",
        "tags": ["Issue Triggers"],
        "responses": {
          "200": {
            "description": "A single issue trigger",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IssueTrigger" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Issue trigger ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "issueTrigger",
        "x-fern-sdk-method-name": "disable"
      }
    },
    "/issue-triggers/{id}/enable": {
      "put": {
        "operationId": "enableIssueTrigger",
        "summary": "Enable an issue trigger",
        "description": "",
        "tags": ["Issue Triggers"],
        "responses": {
          "200": {
            "description": "A single issue trigger",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IssueTrigger" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Issue trigger ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "issueTrigger",
        "x-fern-sdk-method-name": "enable"
      }
    },
    "/attempts": {
      "get": {
        "operationId": "getAttempts",
        "summary": "Get attempts",
        "description": "",
        "tags": ["Attempts"],
        "responses": {
          "200": {
            "description": "List of attempts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventAttemptPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "event_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Event ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Event ID"
                  }
                }
              ],
              "description": "Event the attempt is associated with"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255, "enum": ["created_at"] },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "attempt",
        "x-fern-sdk-method-name": "list"
      }
    },
    "/attempts/{id}": {
      "get": {
        "operationId": "getAttempt",
        "summary": "Get a single attempt",
        "description": "",
        "tags": ["Attempts"],
        "responses": {
          "200": {
            "description": "A single attempt",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventAttempt" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Attempt ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "attempt",
        "x-fern-sdk-method-name": "retrieve"
      }
    },
    "/bookmarks": {
      "get": {
        "operationId": "getBookmarks",
        "summary": "Get bookmarks",
        "description": "",
        "tags": ["Bookmarks"],
        "responses": {
          "200": {
            "description": "List of bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookmarkPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Bookmark ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Bookmark ID"
                  }
                }
              ],
              "description": "Filter by bookmark IDs"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[A-z0-9-_]+$",
                  "maxLength": 155,
                  "description": "Bookmark name"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "Bookmark name"
                  }
                }
              ],
              "description": "Filter by bookmark name"
            }
          },
          {
            "in": "query",
            "name": "webhook_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Connection ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Connection ID"
                  }
                }
              ],
              "description": "Filter by associated connection ID"
            }
          },
          {
            "in": "query",
            "name": "event_data_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Event Data ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Event Data ID"
                  }
                }
              ],
              "description": "Filter by associated event data ID"
            }
          },
          {
            "in": "query",
            "name": "label",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Bookmark label"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Bookmark label"
                  }
                }
              ],
              "description": "Filter by label"
            }
          },
          {
            "in": "query",
            "name": "last_used_at",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "Last used date"
                },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "Last used date"
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "Last used date"
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "Last used date"
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "Last used date"
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by last used date"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255, "enum": ["created_at"] },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "bookmark",
        "x-fern-sdk-method-name": "list"
      },
      "post": {
        "operationId": "createBookmark",
        "summary": "Create a bookmark",
        "description": "",
        "tags": ["Bookmarks"],
        "responses": {
          "200": {
            "description": "A single bookmark",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Bookmark" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "bookmark",
        "x-fern-sdk-method-name": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event_data_id": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "ID of the event data to bookmark"
                  },
                  "webhook_id": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "ID of the associated connection"
                  },
                  "label": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Descriptive name of the bookmark"
                  },
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "A unique, human-friendly name for the bookmark"
                  }
                },
                "required": ["event_data_id", "webhook_id", "label"],
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/bookmarks/{id}": {
      "get": {
        "operationId": "getBookmark",
        "summary": "Get a single bookmark",
        "description": "",
        "tags": ["Bookmarks"],
        "responses": {
          "200": {
            "description": "A single bookmark",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Bookmark" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Bookmark ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "bookmark",
        "x-fern-sdk-method-name": "retrieve"
      },
      "put": {
        "operationId": "updateBookmark",
        "summary": "Update a bookmark",
        "description": "",
        "tags": ["Bookmarks"],
        "responses": {
          "200": {
            "description": "A single bookmark",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Bookmark" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Bookmark ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "bookmark",
        "x-fern-sdk-method-name": "update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event_data_id": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "ID of the event data to bookmark"
                  },
                  "webhook_id": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "ID of the associated connection"
                  },
                  "label": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Descriptive name of the bookmark"
                  },
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "A unique, human-friendly name for the bookmark"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteBookmark",
        "summary": "Delete a bookmark",
        "description": "",
        "tags": ["Bookmarks"],
        "responses": {
          "200": {
            "description": "An object with deleted bookmark's id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedBookmarkResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Bookmark ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "bookmark",
        "x-fern-sdk-method-name": "delete"
      }
    },
    "/bookmarks/{id}/trigger": {
      "post": {
        "operationId": "triggerBookmark",
        "summary": "Trigger a bookmark",
        "description": "",
        "tags": ["Bookmarks"],
        "responses": {
          "200": {
            "description": "Array of created events",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventArray" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Bookmark ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "bookmark",
        "x-fern-sdk-method-name": "trigger",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "target": {
                    "type": "string",
                    "enum": ["http", "cli"],
                    "description": "Bookmark target"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/destinations": {
      "get": {
        "operationId": "getDestinations",
        "summary": "Get destinations",
        "description": "",
        "tags": ["Destinations"],
        "responses": {
          "200": {
            "description": "List of destinations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "description": "Filter by destination IDs"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[A-z0-9-_]+$",
                  "maxLength": 155
                },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155
                    },
                    "gte": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155
                    },
                    "le": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155
                    },
                    "lte": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155
                    },
                    "any": { "type": "boolean" },
                    "contains": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "The destination name"
            }
          },
          {
            "in": "query",
            "name": "archived",
            "schema": {
              "type": "boolean",
              "description": "Include archived resources in the response"
            }
          },
          {
            "in": "query",
            "name": "archived_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Date the destination was archived"
            }
          },
          {
            "in": "query",
            "name": "url",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "URL" },
                {
                  "type": "array",
                  "items": { "type": "string", "format": "URL" }
                }
              ],
              "description": "HTTP endpoint of the destination"
            }
          },
          {
            "in": "query",
            "name": "cli_path",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "object",
                  "properties": { "any": { "type": "boolean" } },
                  "additionalProperties": false
                },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "description": "Path for the CLI destination"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255, "enum": ["created_at"] },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "destination",
        "x-fern-sdk-method-name": "list"
      },
      "post": {
        "operationId": "createDestination",
        "summary": "Create a destination",
        "description": "",
        "tags": ["Destinations"],
        "responses": {
          "200": {
            "description": "A single destination",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Destination" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "destination",
        "x-fern-sdk-method-name": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "Name for the destination"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "nullable": true,
                    "description": "Description for the destination"
                  },
                  "url": {
                    "type": "string",
                    "nullable": true,
                    "description": "Endpoint of the destination",
                    "format": "URL"
                  },
                  "cli_path": {
                    "type": "string",
                    "nullable": true,
                    "description": "Path for the CLI destination"
                  },
                  "rate_limit_period": {
                    "type": "string",
                    "enum": ["second", "minute", "hour"],
                    "nullable": true,
                    "description": "Period to rate limit attempts"
                  },
                  "rate_limit": {
                    "type": "integer",
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "description": "When rate limit period is set to \"seconds\""
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 6000,
                        "description": "When rate limit period is set to \"minute\""
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 360000,
                        "description": "When rate limit period is set to \"hour\""
                      }
                    ],
                    "nullable": true,
                    "description": "Limit event attempts to receive per period",
                    "x-docs-type": "integer"
                  },
                  "http_method": {
                    "$ref": "#/components/schemas/DestinationHTTPMethod"
                  },
                  "auth_method": {
                    "$ref": "#/components/schemas/DestinationAuthMethodConfig"
                  },
                  "path_forwarding_disabled": { "type": "boolean" }
                },
                "required": ["name"],
                "additionalProperties": false
              }
            }
          }
        }
      },
      "put": {
        "operationId": "upsertDestination",
        "summary": "Update or create a destination",
        "description": "",
        "tags": ["Destinations"],
        "responses": {
          "200": {
            "description": "A single destination",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Destination" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "destination",
        "x-fern-sdk-method-name": "upsert",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "Name for the destination"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "nullable": true,
                    "description": "Description for the destination"
                  },
                  "url": {
                    "type": "string",
                    "nullable": true,
                    "description": "Endpoint of the destination",
                    "format": "URL"
                  },
                  "cli_path": {
                    "type": "string",
                    "nullable": true,
                    "description": "Path for the CLI destination"
                  },
                  "rate_limit_period": {
                    "type": "string",
                    "enum": ["second", "minute", "hour"],
                    "nullable": true,
                    "description": "Period to rate limit attempts"
                  },
                  "rate_limit": {
                    "type": "integer",
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "description": "When rate limit period is set to \"seconds\""
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 6000,
                        "description": "When rate limit period is set to \"minute\""
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 360000,
                        "description": "When rate limit period is set to \"hour\""
                      }
                    ],
                    "nullable": true,
                    "description": "Limit event attempts to receive per period",
                    "x-docs-type": "integer"
                  },
                  "http_method": {
                    "$ref": "#/components/schemas/DestinationHTTPMethod"
                  },
                  "auth_method": {
                    "$ref": "#/components/schemas/DestinationAuthMethodConfig"
                  },
                  "path_forwarding_disabled": { "type": "boolean" }
                },
                "required": ["name"],
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/destinations/{id}": {
      "get": {
        "operationId": "getDestination",
        "summary": "Get a destination",
        "description": "",
        "tags": ["Destinations"],
        "responses": {
          "200": {
            "description": "A single destination",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Destination" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Destination ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "destination",
        "x-fern-sdk-method-name": "retrieve"
      },
      "put": {
        "operationId": "updateDestination",
        "summary": "Update a destination",
        "description": "",
        "tags": ["Destinations"],
        "responses": {
          "200": {
            "description": "A single destination",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Destination" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Destination ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "destination",
        "x-fern-sdk-method-name": "update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "Name for the destination"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "nullable": true,
                    "description": "Description for the destination"
                  },
                  "url": {
                    "type": "string",
                    "nullable": true,
                    "description": "Endpoint of the destination",
                    "format": "URL"
                  },
                  "cli_path": {
                    "type": "string",
                    "nullable": true,
                    "description": "Path for the CLI destination"
                  },
                  "rate_limit_period": {
                    "type": "string",
                    "enum": ["second", "minute", "hour"],
                    "nullable": true,
                    "description": "Period to rate limit attempts"
                  },
                  "rate_limit": {
                    "type": "integer",
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "description": "When rate limit period is set to \"seconds\""
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 6000,
                        "description": "When rate limit period is set to \"minute\""
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 360000,
                        "description": "When rate limit period is set to \"hour\""
                      }
                    ],
                    "nullable": true,
                    "description": "Limit event attempts to receive per period",
                    "x-docs-type": "integer"
                  },
                  "http_method": {
                    "$ref": "#/components/schemas/DestinationHTTPMethod"
                  },
                  "auth_method": {
                    "$ref": "#/components/schemas/DestinationAuthMethodConfig"
                  },
                  "path_forwarding_disabled": { "type": "boolean" }
                },
                "additionalProperties": false
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteDestination",
        "summary": "Delete a destination",
        "description": "",
        "tags": ["Destinations"],
        "responses": {
          "200": {
            "description": "A single destination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the destination"
                    }
                  },
                  "required": ["id"],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "destination",
        "x-fern-sdk-method-name": "delete"
      }
    },
    "/destinations/{id}/archive": {
      "put": {
        "operationId": "archiveDestination",
        "summary": "Archive a destination",
        "description": "",
        "tags": ["Destinations"],
        "responses": {
          "200": {
            "description": "A single destination",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Destination" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Destination ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "destination",
        "x-fern-sdk-method-name": "archive"
      }
    },
    "/destinations/{id}/unarchive": {
      "put": {
        "operationId": "unarchiveDestination",
        "summary": "Unarchive a destination",
        "description": "",
        "tags": ["Destinations"],
        "responses": {
          "200": {
            "description": "A single destination",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Destination" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Destination ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "destination",
        "x-fern-sdk-method-name": "unarchive"
      }
    },
    "/bulk/events/retry": {
      "get": {
        "operationId": "getEventBulkRetries",
        "summary": "Get events bulk retries",
        "description": "",
        "tags": ["Bulk retry events"],
        "responses": {
          "200": {
            "description": "List of events bulk retries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchOperationPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "cancelled_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by date the bulk retry was cancelled"
            }
          },
          {
            "in": "query",
            "name": "completed_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by date the bulk retry completed"
            }
          },
          {
            "in": "query",
            "name": "created_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by date the bulk retry was created"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Bulk retry ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Bulk retry ID"
                  }
                }
              ],
              "description": "Filter by bulk retry IDs"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Event ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Event ID"
                      }
                    }
                  ],
                  "description": "Filter by event IDs"
                },
                "status": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/EventStatus" },
                    {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/EventStatus" }
                    }
                  ],
                  "description": "Lifecyle status of the event"
                },
                "webhook_id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Webhook ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Webhook ID"
                      }
                    }
                  ],
                  "description": "Filter by webhook connection IDs"
                },
                "destination_id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Destination ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Destination ID"
                      }
                    }
                  ],
                  "description": "Filter by destination IDs"
                },
                "source_id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Source ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Source ID"
                      }
                    }
                  ],
                  "description": "Filter by source IDs"
                },
                "attempts": {
                  "anyOf": [
                    { "type": "integer", "minimum": 0 },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "integer", "minimum": 0 },
                        "gte": { "type": "integer", "minimum": 0 },
                        "le": { "type": "integer", "minimum": 0 },
                        "lte": { "type": "integer", "minimum": 0 },
                        "any": { "type": "boolean" },
                        "contains": { "type": "integer", "minimum": 0 }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "Filter by number of attempts"
                },
                "response_status": {
                  "anyOf": [
                    { "type": "integer", "minimum": 200, "maximum": 600 },
                    {
                      "type": "object",
                      "properties": {
                        "gt": {
                          "type": "integer",
                          "minimum": 200,
                          "maximum": 600
                        },
                        "gte": {
                          "type": "integer",
                          "minimum": 200,
                          "maximum": 600
                        },
                        "le": {
                          "type": "integer",
                          "minimum": 200,
                          "maximum": 600
                        },
                        "lte": {
                          "type": "integer",
                          "minimum": 200,
                          "maximum": 600
                        },
                        "any": { "type": "boolean" },
                        "contains": {
                          "type": "integer",
                          "minimum": 200,
                          "maximum": 600
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "minimum": 200,
                        "maximum": 600
                      }
                    }
                  ],
                  "nullable": true,
                  "description": "Filter by HTTP response status code"
                },
                "successful_at": {
                  "anyOf": [
                    { "type": "string", "format": "date-time" },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "string", "format": "date-time" },
                        "gte": { "type": "string", "format": "date-time" },
                        "le": { "type": "string", "format": "date-time" },
                        "lte": { "type": "string", "format": "date-time" },
                        "any": { "type": "boolean" }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "nullable": true,
                  "description": "Filter by `successful_at` date using a date operator"
                },
                "created_at": {
                  "anyOf": [
                    { "type": "string", "format": "date-time" },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "string", "format": "date-time" },
                        "gte": { "type": "string", "format": "date-time" },
                        "le": { "type": "string", "format": "date-time" },
                        "lte": { "type": "string", "format": "date-time" },
                        "any": { "type": "boolean" }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "Filter by `created_at` date using a date operator"
                },
                "error_code": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/AttemptErrorCodes" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AttemptErrorCodes"
                      }
                    }
                  ],
                  "description": "Filter by error code code"
                },
                "cli_id": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": { "any": { "type": "boolean" } },
                      "additionalProperties": false
                    },
                    { "type": "array", "items": { "type": "string" } }
                  ],
                  "nullable": true,
                  "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI."
                },
                "last_attempt_at": {
                  "anyOf": [
                    { "type": "string", "format": "date-time" },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "string", "format": "date-time" },
                        "gte": { "type": "string", "format": "date-time" },
                        "le": { "type": "string", "format": "date-time" },
                        "lte": { "type": "string", "format": "date-time" },
                        "any": { "type": "boolean" }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "nullable": true,
                  "description": "Filter by `last_attempt_at` date using a date operator"
                },
                "search_term": {
                  "type": "string",
                  "minLength": 3,
                  "description": "URL Encoded string of the value to match partially to the body, headers, parsed_query or path"
                },
                "headers": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the data headers",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "body": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the data body",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "parsed_query": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "path": {
                  "type": "string",
                  "description": "URL Encoded string of the value to match partially to the path"
                },
                "cli_user_id": {
                  "anyOf": [
                    { "type": "string" },
                    { "type": "array", "items": { "type": "string" } }
                  ],
                  "nullable": true,
                  "x-docs-hide": true
                },
                "issue_id": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "x-docs-hide": true
                },
                "event_data_id": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "x-docs-hide": true
                },
                "bulk_retry_id": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "x-docs-hide": true
                }
              },
              "additionalProperties": false,
              "description": "Filter for events to be included in the bulk retry, use query parameters of [Event](#events)",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "query_partial_match",
            "schema": {
              "type": "boolean",
              "description": "Allow partial filter match on query property"
            }
          },
          {
            "in": "query",
            "name": "in_progress",
            "schema": {
              "type": "boolean",
              "description": "Indicates if the bulk retry is currently in progress"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255, "enum": ["created_at"] },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "eventBulkRetry",
        "x-fern-sdk-method-name": "list"
      },
      "post": {
        "operationId": "createEventBulkRetry",
        "summary": "Create an events bulk retry",
        "description": "",
        "tags": ["Bulk retry events"],
        "responses": {
          "200": {
            "description": "A single events bulk retry",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BatchOperation" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "eventBulkRetry",
        "x-fern-sdk-method-name": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "anyOf": [
                          {
                            "type": "string",
                            "maxLength": 255,
                            "description": "Event ID"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "maxLength": 255,
                              "description": "Event ID"
                            }
                          }
                        ],
                        "description": "Filter by event IDs"
                      },
                      "status": {
                        "anyOf": [
                          { "$ref": "#/components/schemas/EventStatus" },
                          {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/EventStatus"
                            }
                          }
                        ],
                        "description": "Lifecyle status of the event"
                      },
                      "webhook_id": {
                        "anyOf": [
                          {
                            "type": "string",
                            "maxLength": 255,
                            "description": "Webhook ID"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "maxLength": 255,
                              "description": "Webhook ID"
                            }
                          }
                        ],
                        "description": "Filter by webhook connection IDs"
                      },
                      "destination_id": {
                        "anyOf": [
                          {
                            "type": "string",
                            "maxLength": 255,
                            "description": "Destination ID"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "maxLength": 255,
                              "description": "Destination ID"
                            }
                          }
                        ],
                        "description": "Filter by destination IDs"
                      },
                      "source_id": {
                        "anyOf": [
                          {
                            "type": "string",
                            "maxLength": 255,
                            "description": "Source ID"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "maxLength": 255,
                              "description": "Source ID"
                            }
                          }
                        ],
                        "description": "Filter by source IDs"
                      },
                      "attempts": {
                        "anyOf": [
                          { "type": "integer", "minimum": 0 },
                          {
                            "type": "object",
                            "properties": {
                              "gt": { "type": "integer", "minimum": 0 },
                              "gte": { "type": "integer", "minimum": 0 },
                              "le": { "type": "integer", "minimum": 0 },
                              "lte": { "type": "integer", "minimum": 0 },
                              "any": { "type": "boolean" },
                              "contains": { "type": "integer", "minimum": 0 }
                            },
                            "additionalProperties": false
                          }
                        ],
                        "description": "Filter by number of attempts"
                      },
                      "response_status": {
                        "anyOf": [
                          { "type": "integer", "minimum": 200, "maximum": 600 },
                          {
                            "type": "object",
                            "properties": {
                              "gt": {
                                "type": "integer",
                                "minimum": 200,
                                "maximum": 600
                              },
                              "gte": {
                                "type": "integer",
                                "minimum": 200,
                                "maximum": 600
                              },
                              "le": {
                                "type": "integer",
                                "minimum": 200,
                                "maximum": 600
                              },
                              "lte": {
                                "type": "integer",
                                "minimum": 200,
                                "maximum": 600
                              },
                              "any": { "type": "boolean" },
                              "contains": {
                                "type": "integer",
                                "minimum": 200,
                                "maximum": 600
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "minimum": 200,
                              "maximum": 600
                            }
                          }
                        ],
                        "nullable": true,
                        "description": "Filter by HTTP response status code"
                      },
                      "successful_at": {
                        "anyOf": [
                          { "type": "string", "format": "date-time" },
                          {
                            "type": "object",
                            "properties": {
                              "gt": { "type": "string", "format": "date-time" },
                              "gte": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "le": { "type": "string", "format": "date-time" },
                              "lte": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "any": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          }
                        ],
                        "nullable": true,
                        "description": "Filter by `successful_at` date using a date operator"
                      },
                      "created_at": {
                        "anyOf": [
                          { "type": "string", "format": "date-time" },
                          {
                            "type": "object",
                            "properties": {
                              "gt": { "type": "string", "format": "date-time" },
                              "gte": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "le": { "type": "string", "format": "date-time" },
                              "lte": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "any": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          }
                        ],
                        "description": "Filter by `created_at` date using a date operator"
                      },
                      "error_code": {
                        "anyOf": [
                          { "$ref": "#/components/schemas/AttemptErrorCodes" },
                          {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/AttemptErrorCodes"
                            }
                          }
                        ],
                        "description": "Filter by error code code"
                      },
                      "cli_id": {
                        "anyOf": [
                          { "type": "string" },
                          {
                            "type": "object",
                            "properties": { "any": { "type": "boolean" } },
                            "additionalProperties": false
                          },
                          { "type": "array", "items": { "type": "string" } }
                        ],
                        "nullable": true,
                        "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI."
                      },
                      "last_attempt_at": {
                        "anyOf": [
                          { "type": "string", "format": "date-time" },
                          {
                            "type": "object",
                            "properties": {
                              "gt": { "type": "string", "format": "date-time" },
                              "gte": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "le": { "type": "string", "format": "date-time" },
                              "lte": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "any": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          }
                        ],
                        "nullable": true,
                        "description": "Filter by `last_attempt_at` date using a date operator"
                      },
                      "search_term": {
                        "type": "string",
                        "minLength": 3,
                        "description": "URL Encoded string of the value to match partially to the body, headers, parsed_query or path"
                      },
                      "headers": {
                        "anyOf": [
                          { "type": "string" },
                          {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false
                          }
                        ],
                        "description": "URL Encoded string of the JSON to match to the data headers",
                        "x-docs-force-simple-type": true,
                        "x-docs-type": "JSON"
                      },
                      "body": {
                        "anyOf": [
                          { "type": "string" },
                          {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false
                          }
                        ],
                        "description": "URL Encoded string of the JSON to match to the data body",
                        "x-docs-force-simple-type": true,
                        "x-docs-type": "JSON"
                      },
                      "parsed_query": {
                        "anyOf": [
                          { "type": "string" },
                          {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false
                          }
                        ],
                        "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
                        "x-docs-force-simple-type": true,
                        "x-docs-type": "JSON"
                      },
                      "path": {
                        "type": "string",
                        "description": "URL Encoded string of the value to match partially to the path"
                      },
                      "cli_user_id": {
                        "anyOf": [
                          { "type": "string" },
                          { "type": "array", "items": { "type": "string" } }
                        ],
                        "nullable": true,
                        "x-docs-hide": true
                      },
                      "issue_id": {
                        "anyOf": [
                          { "type": "string", "maxLength": 255 },
                          {
                            "type": "array",
                            "items": { "type": "string", "maxLength": 255 }
                          }
                        ],
                        "x-docs-hide": true
                      },
                      "event_data_id": {
                        "anyOf": [
                          { "type": "string", "maxLength": 255 },
                          {
                            "type": "array",
                            "items": { "type": "string", "maxLength": 255 }
                          }
                        ],
                        "x-docs-hide": true
                      },
                      "bulk_retry_id": {
                        "anyOf": [
                          { "type": "string", "maxLength": 255 },
                          {
                            "type": "array",
                            "items": { "type": "string", "maxLength": 255 }
                          }
                        ],
                        "x-docs-hide": true
                      }
                    },
                    "additionalProperties": false,
                    "description": "Filter properties for the events to be included in the bulk retry",
                    "x-docs-force-simple-type": true,
                    "x-docs-type": "JSON"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/bulk/events/retry/plan": {
      "get": {
        "operationId": "generateEventBulkRetryPlan",
        "summary": "Generate an events bulk retry plan",
        "description": "",
        "tags": ["Bulk retry events"],
        "responses": {
          "200": {
            "description": "Events bulk retry plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "estimated_batch": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Number of batches required to complete the bulk retry"
                    },
                    "estimated_count": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Number of estimated events to be retried"
                    },
                    "progress": {
                      "type": "number",
                      "format": "float",
                      "nullable": true,
                      "description": "Progression of the batch operations, values 0 - 1"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Event ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Event ID"
                      }
                    }
                  ],
                  "description": "Filter by event IDs"
                },
                "status": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/EventStatus" },
                    {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/EventStatus" }
                    }
                  ],
                  "description": "Lifecyle status of the event"
                },
                "webhook_id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Webhook ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Webhook ID"
                      }
                    }
                  ],
                  "description": "Filter by webhook connection IDs"
                },
                "destination_id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Destination ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Destination ID"
                      }
                    }
                  ],
                  "description": "Filter by destination IDs"
                },
                "source_id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Source ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Source ID"
                      }
                    }
                  ],
                  "description": "Filter by source IDs"
                },
                "attempts": {
                  "anyOf": [
                    { "type": "integer", "minimum": 0 },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "integer", "minimum": 0 },
                        "gte": { "type": "integer", "minimum": 0 },
                        "le": { "type": "integer", "minimum": 0 },
                        "lte": { "type": "integer", "minimum": 0 },
                        "any": { "type": "boolean" },
                        "contains": { "type": "integer", "minimum": 0 }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "Filter by number of attempts"
                },
                "response_status": {
                  "anyOf": [
                    { "type": "integer", "minimum": 200, "maximum": 600 },
                    {
                      "type": "object",
                      "properties": {
                        "gt": {
                          "type": "integer",
                          "minimum": 200,
                          "maximum": 600
                        },
                        "gte": {
                          "type": "integer",
                          "minimum": 200,
                          "maximum": 600
                        },
                        "le": {
                          "type": "integer",
                          "minimum": 200,
                          "maximum": 600
                        },
                        "lte": {
                          "type": "integer",
                          "minimum": 200,
                          "maximum": 600
                        },
                        "any": { "type": "boolean" },
                        "contains": {
                          "type": "integer",
                          "minimum": 200,
                          "maximum": 600
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "minimum": 200,
                        "maximum": 600
                      }
                    }
                  ],
                  "nullable": true,
                  "description": "Filter by HTTP response status code"
                },
                "successful_at": {
                  "anyOf": [
                    { "type": "string", "format": "date-time" },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "string", "format": "date-time" },
                        "gte": { "type": "string", "format": "date-time" },
                        "le": { "type": "string", "format": "date-time" },
                        "lte": { "type": "string", "format": "date-time" },
                        "any": { "type": "boolean" }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "nullable": true,
                  "description": "Filter by `successful_at` date using a date operator"
                },
                "created_at": {
                  "anyOf": [
                    { "type": "string", "format": "date-time" },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "string", "format": "date-time" },
                        "gte": { "type": "string", "format": "date-time" },
                        "le": { "type": "string", "format": "date-time" },
                        "lte": { "type": "string", "format": "date-time" },
                        "any": { "type": "boolean" }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "Filter by `created_at` date using a date operator"
                },
                "error_code": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/AttemptErrorCodes" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AttemptErrorCodes"
                      }
                    }
                  ],
                  "description": "Filter by error code code"
                },
                "cli_id": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": { "any": { "type": "boolean" } },
                      "additionalProperties": false
                    },
                    { "type": "array", "items": { "type": "string" } }
                  ],
                  "nullable": true,
                  "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI."
                },
                "last_attempt_at": {
                  "anyOf": [
                    { "type": "string", "format": "date-time" },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "string", "format": "date-time" },
                        "gte": { "type": "string", "format": "date-time" },
                        "le": { "type": "string", "format": "date-time" },
                        "lte": { "type": "string", "format": "date-time" },
                        "any": { "type": "boolean" }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "nullable": true,
                  "description": "Filter by `last_attempt_at` date using a date operator"
                },
                "search_term": {
                  "type": "string",
                  "minLength": 3,
                  "description": "URL Encoded string of the value to match partially to the body, headers, parsed_query or path"
                },
                "headers": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the data headers",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "body": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the data body",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "parsed_query": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "path": {
                  "type": "string",
                  "description": "URL Encoded string of the value to match partially to the path"
                },
                "cli_user_id": {
                  "anyOf": [
                    { "type": "string" },
                    { "type": "array", "items": { "type": "string" } }
                  ],
                  "nullable": true,
                  "x-docs-hide": true
                },
                "issue_id": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "x-docs-hide": true
                },
                "event_data_id": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "x-docs-hide": true
                },
                "bulk_retry_id": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "x-docs-hide": true
                }
              },
              "additionalProperties": false,
              "description": "Filter properties for the events to be included in the bulk retry",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          }
        ],
        "x-fern-sdk-group-name": "eventBulkRetry",
        "x-fern-sdk-method-name": "plan"
      }
    },
    "/bulk/events/retry/{id}": {
      "get": {
        "operationId": "getEventBulkRetry",
        "summary": "Get an events bulk retry",
        "description": "",
        "tags": ["Bulk retry events"],
        "responses": {
          "200": {
            "description": "A single events bulk retry",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BatchOperation" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Bulk retry ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "eventBulkRetry",
        "x-fern-sdk-method-name": "retrieve"
      }
    },
    "/bulk/events/retry/{id}/cancel": {
      "post": {
        "operationId": "cancelEventBulkRetry",
        "summary": "Cancel an events bulk retry",
        "description": "",
        "tags": ["Bulk retry events"],
        "responses": {
          "200": {
            "description": "A single events bulk retry",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BatchOperation" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Bulk retry ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "eventBulkRetry",
        "x-fern-sdk-method-name": "cancel"
      }
    },
    "/events": {
      "get": {
        "operationId": "getEvents",
        "summary": "Get events",
        "description": "",
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Event ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Event ID"
                  }
                }
              ],
              "description": "Filter by event IDs"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/EventStatus" },
                {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/EventStatus" }
                }
              ],
              "description": "Lifecyle status of the event"
            }
          },
          {
            "in": "query",
            "name": "webhook_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Webhook ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Webhook ID"
                  }
                }
              ],
              "description": "Filter by webhook connection IDs"
            }
          },
          {
            "in": "query",
            "name": "destination_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Destination ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Destination ID"
                  }
                }
              ],
              "description": "Filter by destination IDs"
            }
          },
          {
            "in": "query",
            "name": "source_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Source ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Source ID"
                  }
                }
              ],
              "description": "Filter by source IDs"
            }
          },
          {
            "in": "query",
            "name": "attempts",
            "schema": {
              "anyOf": [
                { "type": "integer", "minimum": 0 },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "integer", "minimum": 0 },
                    "gte": { "type": "integer", "minimum": 0 },
                    "le": { "type": "integer", "minimum": 0 },
                    "lte": { "type": "integer", "minimum": 0 },
                    "any": { "type": "boolean" },
                    "contains": { "type": "integer", "minimum": 0 }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by number of attempts"
            }
          },
          {
            "in": "query",
            "name": "response_status",
            "schema": {
              "anyOf": [
                { "type": "integer", "minimum": 200, "maximum": 600 },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "integer", "minimum": 200, "maximum": 600 },
                    "gte": {
                      "type": "integer",
                      "minimum": 200,
                      "maximum": 600
                    },
                    "le": { "type": "integer", "minimum": 200, "maximum": 600 },
                    "lte": {
                      "type": "integer",
                      "minimum": 200,
                      "maximum": 600
                    },
                    "any": { "type": "boolean" },
                    "contains": {
                      "type": "integer",
                      "minimum": 200,
                      "maximum": 600
                    }
                  },
                  "additionalProperties": false
                },
                {
                  "type": "array",
                  "items": { "type": "integer", "minimum": 200, "maximum": 600 }
                }
              ],
              "nullable": true,
              "description": "Filter by HTTP response status code"
            }
          },
          {
            "in": "query",
            "name": "successful_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "string", "format": "date-time" },
                    "gte": { "type": "string", "format": "date-time" },
                    "le": { "type": "string", "format": "date-time" },
                    "lte": { "type": "string", "format": "date-time" },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "nullable": true,
              "description": "Filter by `successful_at` date using a date operator"
            }
          },
          {
            "in": "query",
            "name": "created_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "string", "format": "date-time" },
                    "gte": { "type": "string", "format": "date-time" },
                    "le": { "type": "string", "format": "date-time" },
                    "lte": { "type": "string", "format": "date-time" },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by `created_at` date using a date operator"
            }
          },
          {
            "in": "query",
            "name": "error_code",
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/AttemptErrorCodes" },
                {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AttemptErrorCodes" }
                }
              ],
              "description": "Filter by error code code"
            }
          },
          {
            "in": "query",
            "name": "cli_id",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": { "any": { "type": "boolean" } },
                  "additionalProperties": false
                },
                { "type": "array", "items": { "type": "string" } }
              ],
              "nullable": true,
              "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI."
            }
          },
          {
            "in": "query",
            "name": "last_attempt_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "string", "format": "date-time" },
                    "gte": { "type": "string", "format": "date-time" },
                    "le": { "type": "string", "format": "date-time" },
                    "lte": { "type": "string", "format": "date-time" },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "nullable": true,
              "description": "Filter by `last_attempt_at` date using a date operator"
            }
          },
          {
            "in": "query",
            "name": "search_term",
            "schema": {
              "type": "string",
              "minLength": 3,
              "description": "URL Encoded string of the value to match partially to the body, headers, parsed_query or path"
            }
          },
          {
            "in": "query",
            "name": "headers",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": false
                }
              ],
              "description": "URL Encoded string of the JSON to match to the data headers",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "body",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": false
                }
              ],
              "description": "URL Encoded string of the JSON to match to the data body",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "parsed_query",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": false
                }
              ],
              "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string",
              "description": "URL Encoded string of the value to match partially to the path"
            }
          },
          {
            "in": "query",
            "name": "cli_user_id",
            "schema": {
              "anyOf": [
                { "type": "string" },
                { "type": "array", "items": { "type": "string" } }
              ],
              "nullable": true,
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "issue_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "event_data_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "bulk_retry_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string",
              "enum": ["data"],
              "description": "Include the data object in the event model",
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "enum": ["last_attempt_at", "created_at"],
              "description": "Sort key"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "description": "Sort direction"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "event",
        "x-fern-sdk-method-name": "list"
      }
    },
    "/events/{id}": {
      "get": {
        "operationId": "getEvent",
        "summary": "Get an event",
        "description": "",
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "A single event",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Event ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "event",
        "x-fern-sdk-method-name": "retrieve"
      }
    },
    "/events/{id}/raw_body": {
      "get": {
        "operationId": "getRequestRawBody",
        "summary": "Get a event raw body data",
        "description": "",
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "A request raw body data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RawBody" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Event ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "event",
        "x-fern-sdk-method-name": "retrieveBody"
      }
    },
    "/events/{id}/retry": {
      "post": {
        "operationId": "retryEvent",
        "summary": "Retry an event",
        "description": "",
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "Retried event with event attempt",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RetriedEvent" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Event ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "event",
        "x-fern-sdk-method-name": "retry"
      }
    },
    "/events/{id}/mute": {
      "put": {
        "operationId": "muteEvent",
        "summary": "Mute an event",
        "description": "",
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "A single event",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Event ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "event",
        "x-fern-sdk-method-name": "mute"
      }
    },
    "/bulk/ignored-events/retry": {
      "get": {
        "operationId": "getIgnoredEventBulkRetries",
        "summary": "Get ignored events bulk retries",
        "description": "",
        "tags": ["Bulk retry ignored events"],
        "responses": {
          "200": {
            "description": "List of ignored events bulk retries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchOperationPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "cancelled_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by date the bulk retry was cancelled"
            }
          },
          {
            "in": "query",
            "name": "completed_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by date the bulk retry completed"
            }
          },
          {
            "in": "query",
            "name": "created_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by date the bulk retry was created"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Bulk retry ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Bulk retry ID"
                  }
                }
              ],
              "description": "Filter by bulk retry IDs"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "object",
              "properties": {
                "cause": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "description": "The cause of the ignored event"
                },
                "webhook_id": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "description": "Connection ID of the ignored event"
                },
                "transformation_id": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The associated transformation ID (only applicable to the cause `TRANSFORMATION_FAILED`)"
                }
              },
              "additionalProperties": false,
              "description": "Filter by the bulk retry ignored event query object",
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "query_partial_match",
            "schema": {
              "type": "boolean",
              "description": "Allow partial filter match on query property"
            }
          },
          {
            "in": "query",
            "name": "in_progress",
            "schema": {
              "type": "boolean",
              "description": "Indicates if the bulk retry is currently in progress"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255, "enum": ["created_at"] },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "ignoredEventBulkRetry",
        "x-fern-sdk-method-name": "list"
      },
      "post": {
        "operationId": "createIgnoredEventBulkRetry",
        "summary": "Create an ignored events bulk retry",
        "description": "",
        "tags": ["Bulk retry ignored events"],
        "responses": {
          "200": {
            "description": "A single ignored events bulk retry",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BatchOperation" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "ignoredEventBulkRetry",
        "x-fern-sdk-method-name": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "cause": {
                        "anyOf": [
                          { "type": "string", "maxLength": 255 },
                          {
                            "type": "array",
                            "items": { "type": "string", "maxLength": 255 }
                          }
                        ],
                        "description": "The cause of the ignored event"
                      },
                      "webhook_id": {
                        "anyOf": [
                          { "type": "string", "maxLength": 255 },
                          {
                            "type": "array",
                            "items": { "type": "string", "maxLength": 255 }
                          }
                        ],
                        "description": "Connection ID of the ignored event"
                      },
                      "transformation_id": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "The associated transformation ID (only applicable to the cause `TRANSFORMATION_FAILED`)"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Filter by the bulk retry ignored event query object",
                    "x-docs-type": "JSON"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/bulk/ignored-events/retry/plan": {
      "get": {
        "operationId": "generateIgnoredEventBulkRetryPlan",
        "summary": "Generate an ignored events bulk retry plan",
        "description": "",
        "tags": ["Bulk retry ignored events"],
        "responses": {
          "200": {
            "description": "Ignored events bulk retry plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "estimated_batch": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Number of batches required to complete the bulk retry"
                    },
                    "estimated_count": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Number of estimated events to be retried"
                    },
                    "progress": {
                      "type": "number",
                      "format": "float",
                      "nullable": true,
                      "description": "Progression of the batch operations, values 0 - 1"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "object",
              "properties": {
                "cause": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "description": "The cause of the ignored event"
                },
                "webhook_id": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "description": "Connection ID of the ignored event"
                },
                "transformation_id": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The associated transformation ID (only applicable to the cause `TRANSFORMATION_FAILED`)"
                }
              },
              "additionalProperties": false,
              "description": "Filter by the bulk retry ignored event query object",
              "x-docs-type": "JSON"
            }
          }
        ],
        "x-fern-sdk-group-name": "ignoredEventBulkRetry",
        "x-fern-sdk-method-name": "plan"
      }
    },
    "/bulk/ignored-events/retry/{id}": {
      "get": {
        "operationId": "getIgnoredEventBulkRetry",
        "summary": "Get an ignored events bulk retry",
        "description": "",
        "tags": ["Bulk retry ignored events"],
        "responses": {
          "200": {
            "description": "A single ignored events bulk retry",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BatchOperation" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Bulk retry ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "ignoredEventBulkRetry",
        "x-fern-sdk-method-name": "retrieve"
      }
    },
    "/bulk/ignored-events/retry/{id}/cancel": {
      "post": {
        "operationId": "cancelIgnoredEventBulkRetry",
        "summary": "Cancel an ignored events bulk retry",
        "description": "",
        "tags": ["Bulk retry ignored events"],
        "responses": {
          "200": {
            "description": "A single ignored events bulk retry",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BatchOperation" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Bulk retry ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "ignoredEventBulkRetry",
        "x-fern-sdk-method-name": "cancel"
      }
    },
    "/integrations": {
      "get": {
        "operationId": "getIntegrations",
        "summary": "Get integrations",
        "description": "",
        "tags": ["Integrations"],
        "responses": {
          "200": {
            "description": "List of integrations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "label",
            "schema": {
              "type": "string",
              "description": "The integration label"
            }
          },
          {
            "in": "query",
            "name": "provider",
            "schema": { "$ref": "#/components/schemas/IntegrationProvider" }
          }
        ],
        "x-fern-ignore": true
      },
      "post": {
        "operationId": "createIntegration",
        "summary": "Create an integration",
        "description": "",
        "tags": ["Integrations"],
        "responses": {
          "200": {
            "description": "A single integration",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Integration" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-ignore": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "Label of the integration"
                  },
                  "configs": {
                    "anyOf": [
                      { "$ref": "#/components/schemas/HMACIntegrationConfigs" },
                      {
                        "$ref": "#/components/schemas/APIKeyIntegrationConfigs"
                      },
                      {
                        "$ref": "#/components/schemas/HandledAPIKeyIntegrationConfigs"
                      },
                      { "$ref": "#/components/schemas/HandledHMACConfigs" },
                      {
                        "$ref": "#/components/schemas/BasicAuthIntegrationConfigs"
                      },
                      {
                        "$ref": "#/components/schemas/ShopifyIntegrationConfigs"
                      },
                      {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": false
                      }
                    ],
                    "description": "Decrypted Key/Value object of the associated configuration for that provider",
                    "x-docs-force-simple-type": true,
                    "x-docs-type": "object"
                  },
                  "provider": {
                    "$ref": "#/components/schemas/IntegrationProvider"
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IntegrationFeature"
                    },
                    "description": "List of features to enable (see features list above)",
                    "x-docs-force-simple-type": true,
                    "x-docs-type": "Array of string"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/integrations/{id}": {
      "get": {
        "operationId": "getIntegration",
        "summary": "Get an integration",
        "description": "",
        "tags": ["Integrations"],
        "responses": {
          "200": {
            "description": "A single integration",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Integration" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Integration ID" },
            "required": true
          }
        ],
        "x-fern-ignore": true
      },
      "put": {
        "operationId": "updateIntegration",
        "summary": "Update an integration",
        "description": "",
        "tags": ["Integrations"],
        "responses": {
          "200": {
            "description": "A single integration",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Integration" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Integration ID" },
            "required": true
          }
        ],
        "x-fern-ignore": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "Label of the integration"
                  },
                  "configs": {
                    "anyOf": [
                      { "$ref": "#/components/schemas/HMACIntegrationConfigs" },
                      {
                        "$ref": "#/components/schemas/APIKeyIntegrationConfigs"
                      },
                      {
                        "$ref": "#/components/schemas/HandledAPIKeyIntegrationConfigs"
                      },
                      { "$ref": "#/components/schemas/HandledHMACConfigs" },
                      {
                        "$ref": "#/components/schemas/BasicAuthIntegrationConfigs"
                      },
                      {
                        "$ref": "#/components/schemas/ShopifyIntegrationConfigs"
                      },
                      {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": false
                      }
                    ],
                    "description": "Decrypted Key/Value object of the associated configuration for that provider",
                    "x-docs-force-simple-type": true,
                    "x-docs-type": "object"
                  },
                  "provider": {
                    "$ref": "#/components/schemas/IntegrationProvider"
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IntegrationFeature"
                    },
                    "description": "List of features to enable (see features list above)",
                    "x-docs-force-simple-type": true,
                    "x-docs-type": "Array of string"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteIntegration",
        "summary": "Delete an integration",
        "description": "",
        "tags": ["Integrations"],
        "responses": {
          "200": {
            "description": "An object with deleted integration id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeletedIntegration" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Integration ID" },
            "required": true
          }
        ],
        "x-fern-ignore": true
      }
    },
    "/integrations/{id}/attach/{source_id}": {
      "put": {
        "operationId": "attachIntegrationToSource",
        "summary": "Attach an integration to a source",
        "description": "",
        "tags": ["Integrations"],
        "responses": {
          "200": {
            "description": "Attach operation success status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachedIntegrationToSource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Integration ID" },
            "required": true
          },
          {
            "in": "path",
            "name": "source_id",
            "schema": { "type": "string", "description": "Source ID" },
            "required": true
          }
        ],
        "x-fern-ignore": true
      }
    },
    "/integrations/{id}/detach/{source_id}": {
      "put": {
        "operationId": "detachIntegrationToSource",
        "summary": "Detach an integration from a source",
        "description": "",
        "tags": ["Integrations"],
        "responses": {
          "200": {
            "description": "Detach operation success status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetachedIntegrationFromSource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Integration ID" },
            "required": true
          },
          {
            "in": "path",
            "name": "source_id",
            "schema": { "type": "string", "description": "Source ID" },
            "required": true
          }
        ],
        "x-fern-ignore": true
      }
    },
    "/issues": {
      "get": {
        "operationId": "getIssues",
        "summary": "Get issues",
        "description": "",
        "tags": ["Issues"],
        "responses": {
          "200": {
            "description": "List of issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueWithDataPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "example": "iss_YXKv5OdJXCiVwkPhGy"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "iss_YXKv5OdJXCiVwkPhGy"
                  }
                }
              ],
              "description": "Filter by Issue IDs"
            }
          },
          {
            "in": "query",
            "name": "issue_trigger_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Issue trigger ID",
                  "example": "it_BXKv5OdJXCiVwkPhGy"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Issue trigger ID",
                    "example": "it_BXKv5OdJXCiVwkPhGy"
                  }
                }
              ],
              "description": "Filter by Issue trigger IDs"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": ["delivery", "transformation", "backpressure"],
                  "description": "Issue type",
                  "example": "delivery"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["delivery", "transformation", "backpressure"],
                    "description": "Issue type",
                    "example": "delivery"
                  }
                }
              ],
              "description": "Filter by Issue types"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": ["OPENED", "IGNORED", "ACKNOWLEDGED", "RESOLVED"],
                  "description": "Issue status",
                  "example": "OPENED"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["OPENED", "IGNORED", "ACKNOWLEDGED", "RESOLVED"],
                    "description": "Issue status",
                    "example": "OPENED"
                  }
                }
              ],
              "description": "Filter by Issue statuses"
            }
          },
          {
            "in": "query",
            "name": "merged_with",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "description": "Issue ID",
                  "example": "iss_AXKv3OdJXCiKlkPhDz"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Issue ID",
                    "example": "iss_AXKv3OdJXCiKlkPhDz"
                  }
                }
              ],
              "description": "Filter by Merged Issue IDs"
            }
          },
          {
            "in": "query",
            "name": "aggregation_keys",
            "schema": {
              "type": "object",
              "properties": {
                "webhook_id": {
                  "anyOf": [
                    { "type": "string" },
                    { "type": "array", "items": { "type": "string" } }
                  ]
                },
                "response_status": {
                  "anyOf": [
                    { "type": "number", "format": "float" },
                    {
                      "type": "array",
                      "items": { "type": "number", "format": "float" }
                    }
                  ]
                },
                "error_code": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/AttemptErrorCodes" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AttemptErrorCodes"
                      }
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "description": "Filter by aggregation keys",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "created_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by created dates"
            }
          },
          {
            "in": "query",
            "name": "first_seen_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by first seen dates"
            }
          },
          {
            "in": "query",
            "name": "last_seen_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by last seen dates"
            }
          },
          {
            "in": "query",
            "name": "dismissed_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by dismissed dates"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "enum": [
                    "created_at",
                    "first_seen_at",
                    "last_seen_at",
                    "opened_at",
                    "status"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": [
                      "created_at",
                      "first_seen_at",
                      "last_seen_at",
                      "opened_at",
                      "status"
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "issue",
        "x-fern-sdk-method-name": "list"
      }
    },
    "/issues/count": {
      "get": {
        "operationId": "getIssueCount",
        "summary": "Get the number of issues",
        "description": "",
        "tags": ["Issues"],
        "responses": {
          "200": {
            "description": "Issue count",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IssueCount" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "example": "iss_YXKv5OdJXCiVwkPhGy"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "iss_YXKv5OdJXCiVwkPhGy"
                  }
                }
              ],
              "description": "Filter by Issue IDs"
            }
          },
          {
            "in": "query",
            "name": "issue_trigger_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Issue trigger ID",
                  "example": "it_BXKv5OdJXCiVwkPhGy"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Issue trigger ID",
                    "example": "it_BXKv5OdJXCiVwkPhGy"
                  }
                }
              ],
              "description": "Filter by Issue trigger IDs"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": ["delivery", "transformation", "backpressure"],
                  "description": "Issue type",
                  "example": "delivery"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["delivery", "transformation", "backpressure"],
                    "description": "Issue type",
                    "example": "delivery"
                  }
                }
              ],
              "description": "Filter by Issue types"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": ["OPENED", "IGNORED", "ACKNOWLEDGED", "RESOLVED"],
                  "description": "Issue status",
                  "example": "OPENED"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["OPENED", "IGNORED", "ACKNOWLEDGED", "RESOLVED"],
                    "description": "Issue status",
                    "example": "OPENED"
                  }
                }
              ],
              "description": "Filter by Issue statuses"
            }
          },
          {
            "in": "query",
            "name": "merged_with",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "description": "Issue ID",
                  "example": "iss_AXKv3OdJXCiKlkPhDz"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Issue ID",
                    "example": "iss_AXKv3OdJXCiKlkPhDz"
                  }
                }
              ],
              "description": "Filter by Merged Issue IDs"
            }
          },
          {
            "in": "query",
            "name": "aggregation_keys",
            "schema": {
              "type": "object",
              "properties": {
                "webhook_id": {
                  "anyOf": [
                    { "type": "string" },
                    { "type": "array", "items": { "type": "string" } }
                  ]
                },
                "response_status": {
                  "anyOf": [
                    { "type": "number", "format": "float" },
                    {
                      "type": "array",
                      "items": { "type": "number", "format": "float" }
                    }
                  ]
                },
                "error_code": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/AttemptErrorCodes" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AttemptErrorCodes"
                      }
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "description": "Filter by aggregation keys",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "created_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by created dates"
            }
          },
          {
            "in": "query",
            "name": "first_seen_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by first seen dates"
            }
          },
          {
            "in": "query",
            "name": "last_seen_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by last seen dates"
            }
          },
          {
            "in": "query",
            "name": "dismissed_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by dismissed dates"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "enum": [
                    "created_at",
                    "first_seen_at",
                    "last_seen_at",
                    "opened_at",
                    "status"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": [
                      "created_at",
                      "first_seen_at",
                      "last_seen_at",
                      "opened_at",
                      "status"
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "issue",
        "x-fern-sdk-method-name": "count"
      }
    },
    "/issues/{id}": {
      "get": {
        "operationId": "getIssue",
        "summary": "Get a single issue",
        "description": "",
        "tags": ["Issues"],
        "responses": {
          "200": {
            "description": "A single issue",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IssueWithData" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Issue ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "issue",
        "x-fern-sdk-method-name": "retrieve"
      },
      "put": {
        "operationId": "updateIssue",
        "summary": "Update issue",
        "description": "",
        "tags": ["Issues"],
        "responses": {
          "200": {
            "description": "Updated issue",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Issue ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "issue",
        "x-fern-sdk-method-name": "update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": ["OPENED", "IGNORED", "ACKNOWLEDGED", "RESOLVED"],
                    "description": "New status"
                  }
                },
                "required": ["status"],
                "additionalProperties": false
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "dismissIssue",
        "summary": "Dismiss an issue",
        "description": "",
        "tags": ["Issues"],
        "responses": {
          "200": {
            "description": "Dismissed issue",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Issue ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "issue",
        "x-fern-sdk-method-name": "dismiss"
      }
    },
    "/requests": {
      "get": {
        "operationId": "getRequests",
        "summary": "Get requests",
        "description": "",
        "tags": ["Requests"],
        "responses": {
          "200": {
            "description": "List of requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Request ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Request ID"
                  }
                }
              ],
              "description": "Filter by requests IDs"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": ["accepted", "rejected"],
              "description": "Filter by status"
            }
          },
          {
            "in": "query",
            "name": "rejection_cause",
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/RequestRejectionCause" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestRejectionCause"
                  }
                }
              ],
              "nullable": true,
              "description": "Filter by rejection cause"
            }
          },
          {
            "in": "query",
            "name": "source_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Source ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Source ID"
                  }
                }
              ],
              "description": "Filter by source IDs"
            }
          },
          {
            "in": "query",
            "name": "verified",
            "schema": {
              "type": "boolean",
              "description": "Filter by verification status"
            }
          },
          {
            "in": "query",
            "name": "search_term",
            "schema": {
              "type": "string",
              "minLength": 3,
              "description": "URL Encoded string of the value to match partially to the body, headers, parsed_query or path"
            }
          },
          {
            "in": "query",
            "name": "headers",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": false
                }
              ],
              "description": "URL Encoded string of the JSON to match to the data headers",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "body",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": false
                }
              ],
              "description": "URL Encoded string of the JSON to match to the data body",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "parsed_query",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": false
                }
              ],
              "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string",
              "description": "URL Encoded string of the value to match partially to the path"
            }
          },
          {
            "in": "query",
            "name": "ignored_count",
            "schema": {
              "anyOf": [
                { "type": "integer", "minimum": 0 },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "integer", "minimum": 0 },
                    "gte": { "type": "integer", "minimum": 0 },
                    "le": { "type": "integer", "minimum": 0 },
                    "lte": { "type": "integer", "minimum": 0 },
                    "any": { "type": "boolean" },
                    "contains": { "type": "integer", "minimum": 0 }
                  },
                  "additionalProperties": false
                },
                {
                  "type": "array",
                  "items": { "type": "integer", "minimum": 0 }
                }
              ],
              "description": "Filter by count of ignored events"
            }
          },
          {
            "in": "query",
            "name": "events_count",
            "schema": {
              "anyOf": [
                { "type": "integer", "minimum": 0 },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "integer", "minimum": 0 },
                    "gte": { "type": "integer", "minimum": 0 },
                    "le": { "type": "integer", "minimum": 0 },
                    "lte": { "type": "integer", "minimum": 0 },
                    "any": { "type": "boolean" },
                    "contains": { "type": "integer", "minimum": 0 }
                  },
                  "additionalProperties": false
                },
                {
                  "type": "array",
                  "items": { "type": "integer", "minimum": 0 }
                }
              ],
              "description": "Filter by count of events"
            }
          },
          {
            "in": "query",
            "name": "ingested_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "string", "format": "date-time" },
                    "gte": { "type": "string", "format": "date-time" },
                    "le": { "type": "string", "format": "date-time" },
                    "lte": { "type": "string", "format": "date-time" },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by event ingested date"
            }
          },
          {
            "in": "query",
            "name": "bulk_retry_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string",
              "enum": ["data"],
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "enum": ["ingested_at", "created_at"],
              "description": "Sort key"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "description": "Sort direction"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "request",
        "x-fern-sdk-method-name": "list"
      }
    },
    "/requests/{id}": {
      "get": {
        "operationId": "getRequest",
        "summary": "Get a request",
        "description": "",
        "tags": ["Requests"],
        "responses": {
          "200": {
            "description": "A single request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Request" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Request ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "request",
        "x-fern-sdk-method-name": "retrieve"
      }
    },
    "/requests/{id}/raw_body": {
      "get": {
        "operationId": "getRequestRawBody",
        "summary": "Get a request raw body data",
        "description": "",
        "tags": ["Requests"],
        "responses": {
          "200": {
            "description": "A request raw body data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RawBody" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Request ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "request",
        "x-fern-sdk-method-name": "retrieveBody"
      }
    },
    "/requests/{id}/retry": {
      "post": {
        "operationId": "retryRequest",
        "summary": "Retry a request",
        "description": "",
        "tags": ["Requests"],
        "responses": {
          "200": {
            "description": "Retry request operation result",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RetryRequest" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Request ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "request",
        "x-fern-sdk-method-name": "retry",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "webhook_ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Webhook ID"
                    },
                    "description": "Subset of webhook_ids to re-run the event logic on. Useful to retry only specific ignored_events"
                  }
                },
                "required": ["webhook_ids"],
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/requests/{id}/events": {
      "get": {
        "operationId": "getRequestEvents",
        "summary": "Get request events",
        "description": "",
        "tags": ["Requests"],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Event ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Event ID"
                  }
                }
              ],
              "description": "Filter by event IDs"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/EventStatus" },
                {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/EventStatus" }
                }
              ],
              "description": "Lifecyle status of the event"
            }
          },
          {
            "in": "query",
            "name": "webhook_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Webhook ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Webhook ID"
                  }
                }
              ],
              "description": "Filter by webhook connection IDs"
            }
          },
          {
            "in": "query",
            "name": "destination_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Destination ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Destination ID"
                  }
                }
              ],
              "description": "Filter by destination IDs"
            }
          },
          {
            "in": "query",
            "name": "source_id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Source ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Source ID"
                  }
                }
              ],
              "description": "Filter by source IDs"
            }
          },
          {
            "in": "query",
            "name": "attempts",
            "schema": {
              "anyOf": [
                { "type": "integer", "minimum": 0 },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "integer", "minimum": 0 },
                    "gte": { "type": "integer", "minimum": 0 },
                    "le": { "type": "integer", "minimum": 0 },
                    "lte": { "type": "integer", "minimum": 0 },
                    "any": { "type": "boolean" },
                    "contains": { "type": "integer", "minimum": 0 }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by number of attempts"
            }
          },
          {
            "in": "query",
            "name": "response_status",
            "schema": {
              "anyOf": [
                { "type": "integer", "minimum": 200, "maximum": 600 },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "integer", "minimum": 200, "maximum": 600 },
                    "gte": {
                      "type": "integer",
                      "minimum": 200,
                      "maximum": 600
                    },
                    "le": { "type": "integer", "minimum": 200, "maximum": 600 },
                    "lte": {
                      "type": "integer",
                      "minimum": 200,
                      "maximum": 600
                    },
                    "any": { "type": "boolean" },
                    "contains": {
                      "type": "integer",
                      "minimum": 200,
                      "maximum": 600
                    }
                  },
                  "additionalProperties": false
                },
                {
                  "type": "array",
                  "items": { "type": "integer", "minimum": 200, "maximum": 600 }
                }
              ],
              "nullable": true,
              "description": "Filter by HTTP response status code"
            }
          },
          {
            "in": "query",
            "name": "successful_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "string", "format": "date-time" },
                    "gte": { "type": "string", "format": "date-time" },
                    "le": { "type": "string", "format": "date-time" },
                    "lte": { "type": "string", "format": "date-time" },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "nullable": true,
              "description": "Filter by `successful_at` date using a date operator"
            }
          },
          {
            "in": "query",
            "name": "created_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "string", "format": "date-time" },
                    "gte": { "type": "string", "format": "date-time" },
                    "le": { "type": "string", "format": "date-time" },
                    "lte": { "type": "string", "format": "date-time" },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by `created_at` date using a date operator"
            }
          },
          {
            "in": "query",
            "name": "error_code",
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/AttemptErrorCodes" },
                {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AttemptErrorCodes" }
                }
              ],
              "description": "Filter by error code code"
            }
          },
          {
            "in": "query",
            "name": "cli_id",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": { "any": { "type": "boolean" } },
                  "additionalProperties": false
                },
                { "type": "array", "items": { "type": "string" } }
              ],
              "nullable": true,
              "description": "Filter by CLI IDs. `?[any]=true` operator for any CLI."
            }
          },
          {
            "in": "query",
            "name": "last_attempt_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "string", "format": "date-time" },
                    "gte": { "type": "string", "format": "date-time" },
                    "le": { "type": "string", "format": "date-time" },
                    "lte": { "type": "string", "format": "date-time" },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "nullable": true,
              "description": "Filter by `last_attempt_at` date using a date operator"
            }
          },
          {
            "in": "query",
            "name": "search_term",
            "schema": {
              "type": "string",
              "minLength": 3,
              "description": "URL Encoded string of the value to match partially to the body, headers, parsed_query or path"
            }
          },
          {
            "in": "query",
            "name": "headers",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": false
                }
              ],
              "description": "URL Encoded string of the JSON to match to the data headers",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "body",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": false
                }
              ],
              "description": "URL Encoded string of the JSON to match to the data body",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "parsed_query",
            "schema": {
              "anyOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": false
                }
              ],
              "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string",
              "description": "URL Encoded string of the value to match partially to the path"
            }
          },
          {
            "in": "query",
            "name": "cli_user_id",
            "schema": {
              "anyOf": [
                { "type": "string" },
                { "type": "array", "items": { "type": "string" } }
              ],
              "nullable": true,
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "issue_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "event_data_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "bulk_retry_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string",
              "enum": ["data"],
              "description": "Include the data object in the event model",
              "x-docs-hide": true
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "enum": ["last_attempt_at", "created_at"],
              "description": "Sort key"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "description": "Sort direction"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Request ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "request",
        "x-fern-sdk-method-name": "listEvent"
      }
    },
    "/requests/{id}/ignored_events": {
      "get": {
        "operationId": "getRequestIgnoredEvents",
        "summary": "Get request ignored events",
        "description": "",
        "tags": ["Requests"],
        "responses": {
          "200": {
            "description": "List of ignored events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IgnoredEventPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Event ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Event ID"
                  }
                }
              ],
              "description": "Filter by ignored events IDs"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255, "enum": ["created_at"] },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Request ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "request",
        "x-fern-sdk-method-name": "listIgnoredEvent"
      }
    },
    "/bulk/requests/retry": {
      "get": {
        "operationId": "getRequestBulkRetries",
        "summary": "Get request bulk retries",
        "description": "",
        "tags": ["Bulk retry requests"],
        "responses": {
          "200": {
            "description": "List of request bulk retries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchOperationPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "cancelled_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by date the bulk retry was cancelled"
            }
          },
          {
            "in": "query",
            "name": "completed_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by date the bulk retry completed"
            }
          },
          {
            "in": "query",
            "name": "created_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by date the bulk retry was created"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Bulk retry ID"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Bulk retry ID"
                  }
                }
              ],
              "description": "Filter by bulk retry IDs"
            }
          },
          {
            "in": "query",
            "name": "in_progress",
            "schema": {
              "type": "boolean",
              "description": "Indicates if the bulk retry is currently in progress"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Request ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Request ID"
                      }
                    }
                  ],
                  "description": "Filter by requests IDs"
                },
                "status": {
                  "type": "string",
                  "enum": ["accepted", "rejected"],
                  "description": "Filter by status"
                },
                "rejection_cause": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/RequestRejectionCause" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RequestRejectionCause"
                      }
                    }
                  ],
                  "nullable": true,
                  "description": "Filter by rejection cause"
                },
                "source_id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Source ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Source ID"
                      }
                    }
                  ],
                  "description": "Filter by source IDs"
                },
                "verified": {
                  "type": "boolean",
                  "description": "Filter by verification status"
                },
                "search_term": {
                  "type": "string",
                  "minLength": 3,
                  "description": "URL Encoded string of the value to match partially to the body, headers, parsed_query or path"
                },
                "headers": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the data headers",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "body": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the data body",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "parsed_query": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "path": {
                  "type": "string",
                  "description": "URL Encoded string of the value to match partially to the path"
                },
                "ignored_count": {
                  "anyOf": [
                    { "type": "integer", "minimum": 0 },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "integer", "minimum": 0 },
                        "gte": { "type": "integer", "minimum": 0 },
                        "le": { "type": "integer", "minimum": 0 },
                        "lte": { "type": "integer", "minimum": 0 },
                        "any": { "type": "boolean" },
                        "contains": { "type": "integer", "minimum": 0 }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "array",
                      "items": { "type": "integer", "minimum": 0 }
                    }
                  ],
                  "description": "Filter by count of ignored events"
                },
                "events_count": {
                  "anyOf": [
                    { "type": "integer", "minimum": 0 },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "integer", "minimum": 0 },
                        "gte": { "type": "integer", "minimum": 0 },
                        "le": { "type": "integer", "minimum": 0 },
                        "lte": { "type": "integer", "minimum": 0 },
                        "any": { "type": "boolean" },
                        "contains": { "type": "integer", "minimum": 0 }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "array",
                      "items": { "type": "integer", "minimum": 0 }
                    }
                  ],
                  "description": "Filter by count of events"
                },
                "ingested_at": {
                  "anyOf": [
                    { "type": "string", "format": "date-time" },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "string", "format": "date-time" },
                        "gte": { "type": "string", "format": "date-time" },
                        "le": { "type": "string", "format": "date-time" },
                        "lte": { "type": "string", "format": "date-time" },
                        "any": { "type": "boolean" }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "Filter by event ingested date"
                },
                "bulk_retry_id": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "x-docs-hide": true
                },
                "include": {
                  "type": "string",
                  "enum": ["data"],
                  "x-docs-hide": true
                },
                "order_by": {
                  "type": "string",
                  "maxLength": 255,
                  "enum": ["ingested_at", "created_at"],
                  "description": "Sort key"
                },
                "dir": {
                  "type": "string",
                  "enum": ["asc", "desc"],
                  "description": "Sort direction"
                },
                "limit": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 255,
                  "description": "Result set size"
                },
                "next": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The ID to provide in the query to get the next set of results"
                },
                "prev": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The ID to provide in the query to get the previous set of results"
                }
              },
              "additionalProperties": false,
              "description": "Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          },
          {
            "in": "query",
            "name": "query_partial_match",
            "schema": {
              "type": "boolean",
              "description": "Allow partial filter match on query property"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255, "enum": ["created_at"] },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "requestBulkRetry",
        "x-fern-sdk-method-name": "list"
      },
      "post": {
        "operationId": "createRequestBulkRetry",
        "summary": "Create a requests bulk retry",
        "description": "",
        "tags": ["Bulk retry requests"],
        "responses": {
          "200": {
            "description": "A single requests bulk retry",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BatchOperation" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "requestBulkRetry",
        "x-fern-sdk-method-name": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "anyOf": [
                          {
                            "type": "string",
                            "maxLength": 255,
                            "description": "Request ID"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "maxLength": 255,
                              "description": "Request ID"
                            }
                          }
                        ],
                        "description": "Filter by requests IDs"
                      },
                      "status": {
                        "type": "string",
                        "enum": ["accepted", "rejected"],
                        "description": "Filter by status"
                      },
                      "rejection_cause": {
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/RequestRejectionCause"
                          },
                          {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/RequestRejectionCause"
                            }
                          }
                        ],
                        "nullable": true,
                        "description": "Filter by rejection cause"
                      },
                      "source_id": {
                        "anyOf": [
                          {
                            "type": "string",
                            "maxLength": 255,
                            "description": "Source ID"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "maxLength": 255,
                              "description": "Source ID"
                            }
                          }
                        ],
                        "description": "Filter by source IDs"
                      },
                      "verified": {
                        "type": "boolean",
                        "description": "Filter by verification status"
                      },
                      "search_term": {
                        "type": "string",
                        "minLength": 3,
                        "description": "URL Encoded string of the value to match partially to the body, headers, parsed_query or path"
                      },
                      "headers": {
                        "anyOf": [
                          { "type": "string" },
                          {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false
                          }
                        ],
                        "description": "URL Encoded string of the JSON to match to the data headers",
                        "x-docs-force-simple-type": true,
                        "x-docs-type": "JSON"
                      },
                      "body": {
                        "anyOf": [
                          { "type": "string" },
                          {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false
                          }
                        ],
                        "description": "URL Encoded string of the JSON to match to the data body",
                        "x-docs-force-simple-type": true,
                        "x-docs-type": "JSON"
                      },
                      "parsed_query": {
                        "anyOf": [
                          { "type": "string" },
                          {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false
                          }
                        ],
                        "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
                        "x-docs-force-simple-type": true,
                        "x-docs-type": "JSON"
                      },
                      "path": {
                        "type": "string",
                        "description": "URL Encoded string of the value to match partially to the path"
                      },
                      "ignored_count": {
                        "anyOf": [
                          { "type": "integer", "minimum": 0 },
                          {
                            "type": "object",
                            "properties": {
                              "gt": { "type": "integer", "minimum": 0 },
                              "gte": { "type": "integer", "minimum": 0 },
                              "le": { "type": "integer", "minimum": 0 },
                              "lte": { "type": "integer", "minimum": 0 },
                              "any": { "type": "boolean" },
                              "contains": { "type": "integer", "minimum": 0 }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "array",
                            "items": { "type": "integer", "minimum": 0 }
                          }
                        ],
                        "description": "Filter by count of ignored events"
                      },
                      "events_count": {
                        "anyOf": [
                          { "type": "integer", "minimum": 0 },
                          {
                            "type": "object",
                            "properties": {
                              "gt": { "type": "integer", "minimum": 0 },
                              "gte": { "type": "integer", "minimum": 0 },
                              "le": { "type": "integer", "minimum": 0 },
                              "lte": { "type": "integer", "minimum": 0 },
                              "any": { "type": "boolean" },
                              "contains": { "type": "integer", "minimum": 0 }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "array",
                            "items": { "type": "integer", "minimum": 0 }
                          }
                        ],
                        "description": "Filter by count of events"
                      },
                      "ingested_at": {
                        "anyOf": [
                          { "type": "string", "format": "date-time" },
                          {
                            "type": "object",
                            "properties": {
                              "gt": { "type": "string", "format": "date-time" },
                              "gte": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "le": { "type": "string", "format": "date-time" },
                              "lte": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "any": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          }
                        ],
                        "description": "Filter by event ingested date"
                      },
                      "bulk_retry_id": {
                        "anyOf": [
                          { "type": "string", "maxLength": 255 },
                          {
                            "type": "array",
                            "items": { "type": "string", "maxLength": 255 }
                          }
                        ],
                        "x-docs-hide": true
                      }
                    },
                    "additionalProperties": false,
                    "description": "Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)",
                    "x-docs-force-simple-type": true,
                    "x-docs-type": "JSON"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/bulk/requests/retry/plan": {
      "get": {
        "operationId": "generateRequestBulkRetryPlan",
        "summary": "Generate a requests bulk retry plan",
        "description": "",
        "tags": ["Bulk retry requests"],
        "responses": {
          "200": {
            "description": "Requests bulk retry plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "estimated_batch": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Number of batches required to complete the bulk retry"
                    },
                    "estimated_count": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Number of estimated events to be retried"
                    },
                    "progress": {
                      "type": "number",
                      "format": "float",
                      "nullable": true,
                      "description": "Progression of the batch operations, values 0 - 1"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Request ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Request ID"
                      }
                    }
                  ],
                  "description": "Filter by requests IDs"
                },
                "status": {
                  "type": "string",
                  "enum": ["accepted", "rejected"],
                  "description": "Filter by status"
                },
                "rejection_cause": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/RequestRejectionCause" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RequestRejectionCause"
                      }
                    }
                  ],
                  "nullable": true,
                  "description": "Filter by rejection cause"
                },
                "source_id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 255,
                      "description": "Source ID"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Source ID"
                      }
                    }
                  ],
                  "description": "Filter by source IDs"
                },
                "verified": {
                  "type": "boolean",
                  "description": "Filter by verification status"
                },
                "search_term": {
                  "type": "string",
                  "minLength": 3,
                  "description": "URL Encoded string of the value to match partially to the body, headers, parsed_query or path"
                },
                "headers": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the data headers",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "body": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the data body",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "parsed_query": {
                  "anyOf": [
                    { "type": "string" },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": false
                    }
                  ],
                  "description": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
                  "x-docs-force-simple-type": true,
                  "x-docs-type": "JSON"
                },
                "path": {
                  "type": "string",
                  "description": "URL Encoded string of the value to match partially to the path"
                },
                "ignored_count": {
                  "anyOf": [
                    { "type": "integer", "minimum": 0 },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "integer", "minimum": 0 },
                        "gte": { "type": "integer", "minimum": 0 },
                        "le": { "type": "integer", "minimum": 0 },
                        "lte": { "type": "integer", "minimum": 0 },
                        "any": { "type": "boolean" },
                        "contains": { "type": "integer", "minimum": 0 }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "array",
                      "items": { "type": "integer", "minimum": 0 }
                    }
                  ],
                  "description": "Filter by count of ignored events"
                },
                "events_count": {
                  "anyOf": [
                    { "type": "integer", "minimum": 0 },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "integer", "minimum": 0 },
                        "gte": { "type": "integer", "minimum": 0 },
                        "le": { "type": "integer", "minimum": 0 },
                        "lte": { "type": "integer", "minimum": 0 },
                        "any": { "type": "boolean" },
                        "contains": { "type": "integer", "minimum": 0 }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "array",
                      "items": { "type": "integer", "minimum": 0 }
                    }
                  ],
                  "description": "Filter by count of events"
                },
                "ingested_at": {
                  "anyOf": [
                    { "type": "string", "format": "date-time" },
                    {
                      "type": "object",
                      "properties": {
                        "gt": { "type": "string", "format": "date-time" },
                        "gte": { "type": "string", "format": "date-time" },
                        "le": { "type": "string", "format": "date-time" },
                        "lte": { "type": "string", "format": "date-time" },
                        "any": { "type": "boolean" }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "Filter by event ingested date"
                },
                "bulk_retry_id": {
                  "anyOf": [
                    { "type": "string", "maxLength": 255 },
                    {
                      "type": "array",
                      "items": { "type": "string", "maxLength": 255 }
                    }
                  ],
                  "x-docs-hide": true
                }
              },
              "additionalProperties": false,
              "description": "Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)",
              "x-docs-force-simple-type": true,
              "x-docs-type": "JSON"
            }
          }
        ],
        "x-fern-sdk-group-name": "requestBulkRetry",
        "x-fern-sdk-method-name": "plan"
      }
    },
    "/bulk/requests/retry/{id}": {
      "get": {
        "operationId": "getRequestBulkRetry",
        "summary": "Get a requests bulk retry",
        "description": "",
        "tags": ["Bulk retry requests"],
        "responses": {
          "200": {
            "description": "A single requests bulk retry",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BatchOperation" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Bulk retry ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "requestBulkRetry",
        "x-fern-sdk-method-name": "retrieve"
      }
    },
    "/bulk/requests/retry/{id}/cancel": {
      "post": {
        "operationId": "cancelRequestBulkRetry",
        "summary": "Cancel a requests bulk retry",
        "description": "",
        "tags": ["Bulk retry requests"],
        "responses": {
          "200": {
            "description": "A single requests bulk retry",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BatchOperation" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Bulk retry ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "requestBulkRetry",
        "x-fern-sdk-method-name": "cancel"
      }
    },
    "/sources": {
      "get": {
        "operationId": "getSources",
        "summary": "Get sources",
        "description": "",
        "tags": ["Sources"],
        "responses": {
          "200": {
            "description": "List of sources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcePaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "description": "Filter by source IDs"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[A-z0-9-_]+$",
                  "maxLength": 155
                },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155
                    },
                    "gte": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155
                    },
                    "le": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155
                    },
                    "lte": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155
                    },
                    "any": { "type": "boolean" },
                    "contains": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "The source name"
            }
          },
          {
            "in": "query",
            "name": "archived",
            "schema": {
              "type": "boolean",
              "description": "Include archived resources in the response"
            }
          },
          {
            "in": "query",
            "name": "archived_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Date the source was archived"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255, "enum": ["created_at"] },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "source",
        "x-fern-sdk-method-name": "list"
      },
      "post": {
        "operationId": "createSource",
        "summary": "Create a source",
        "description": "",
        "tags": ["Sources"],
        "responses": {
          "200": {
            "description": "A single source",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Source" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "source",
        "x-fern-sdk-method-name": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "A unique name for the source"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "nullable": true,
                    "description": "Description for the source"
                  },
                  "allowed_http_methods": {
                    "$ref": "#/components/schemas/SourceAllowedHTTPMethod"
                  },
                  "custom_response": {
                    "$ref": "#/components/schemas/SourceCustomResponse"
                  },
                  "verification": {
                    "$ref": "#/components/schemas/VerificationConfig"
                  }
                },
                "required": ["name"],
                "additionalProperties": false
              }
            }
          }
        }
      },
      "put": {
        "operationId": "upsertSource",
        "summary": "Update or create a source",
        "description": "",
        "tags": ["Sources"],
        "responses": {
          "200": {
            "description": "A single source",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Source" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "source",
        "x-fern-sdk-method-name": "upsert",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "A unique name for the source"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "nullable": true,
                    "description": "Description for the source"
                  },
                  "allowed_http_methods": {
                    "$ref": "#/components/schemas/SourceAllowedHTTPMethod"
                  },
                  "custom_response": {
                    "$ref": "#/components/schemas/SourceCustomResponse"
                  },
                  "verification": {
                    "$ref": "#/components/schemas/VerificationConfig"
                  }
                },
                "required": ["name"],
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/sources/{id}": {
      "get": {
        "operationId": "getSource",
        "summary": "Get a source",
        "description": "",
        "tags": ["Sources"],
        "responses": {
          "200": {
            "description": "A single source",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Source" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "schema": { "type": "string", "enum": ["verification.configs"] }
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Source ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "source",
        "x-fern-sdk-method-name": "retrieve"
      },
      "put": {
        "operationId": "updateSource",
        "summary": "Update a source",
        "description": "",
        "tags": ["Sources"],
        "responses": {
          "200": {
            "description": "A single source",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Source" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Source ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "source",
        "x-fern-sdk-method-name": "update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "A unique name for the source"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "nullable": true,
                    "description": "Description for the source"
                  },
                  "allowed_http_methods": {
                    "$ref": "#/components/schemas/SourceAllowedHTTPMethod"
                  },
                  "custom_response": {
                    "$ref": "#/components/schemas/SourceCustomResponse"
                  },
                  "verification": {
                    "$ref": "#/components/schemas/VerificationConfig"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSource",
        "summary": "Delete a source",
        "description": "",
        "tags": ["Sources"],
        "responses": {
          "200": {
            "description": "A single source",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the source"
                    }
                  },
                  "required": ["id"],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "source",
        "x-fern-sdk-method-name": "delete"
      }
    },
    "/sources/{id}/archive": {
      "put": {
        "operationId": "archiveSource",
        "summary": "Archive a source",
        "description": "",
        "tags": ["Sources"],
        "responses": {
          "200": {
            "description": "A single source",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Source" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Source ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "source",
        "x-fern-sdk-method-name": "archive"
      }
    },
    "/sources/{id}/unarchive": {
      "put": {
        "operationId": "unarchiveSource",
        "summary": "Unarchive a source",
        "description": "",
        "tags": ["Sources"],
        "responses": {
          "200": {
            "description": "A single source",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Source" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Source ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "source",
        "x-fern-sdk-method-name": "unarchive"
      }
    },
    "/notifications/webhooks": {
      "put": {
        "operationId": "toggleWebhookNotifications",
        "summary": "Toggle webhook notifications for the workspace",
        "description": "",
        "tags": ["Notifications"],
        "responses": {
          "200": {
            "description": "Toggle operation status response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToggleWebhookNotifications"
                }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "notification",
        "x-fern-sdk-method-name": "update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable webhook notifications on the workspace"
                  },
                  "topics": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/TopicsValue" },
                    "description": "List of topics to send notifications for"
                  },
                  "source_id": {
                    "type": "string",
                    "description": "The Hookdeck Source to send the webhook to"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/teams/{team_id}/custom_domains": {
      "post": {
        "operationId": "addCustomDomain",
        "summary": "Add a custom domain to the workspace",
        "description": "",
        "tags": ["Notifications"],
        "responses": {
          "200": {
            "description": "Custom domain successfuly added",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AddCustomHostname" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "schema": { "type": "string" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "customDomain",
        "x-fern-sdk-method-name": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddCustomHostname" }
            }
          }
        }
      },
      "get": {
        "operationId": "listCustomDomains",
        "summary": "List all custom domains and their verification statuses for the workspace",
        "description": "",
        "tags": ["Notifications"],
        "responses": {
          "200": {
            "description": "List of custom domains",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCustomDomainSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "schema": { "type": "string" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "customDomain",
        "x-fern-sdk-method-name": "list"
      }
    },
    "/teams/{team_id}/custom_domains/{domain_id}": {
      "delete": {
        "operationId": "deleteCustomDomain",
        "summary": "Removes a custom domain from the workspace",
        "description": "",
        "tags": ["Notifications"],
        "responses": {
          "200": {
            "description": "Custom domain successfuly removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCustomDomainSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "schema": { "type": "string" },
            "required": true
          },
          {
            "in": "path",
            "name": "domain_id",
            "schema": { "type": "string" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "customDomain",
        "x-fern-sdk-method-name": "delete"
      }
    },
    "/transformations": {
      "get": {
        "operationId": "getTransformations",
        "summary": "Get transformations",
        "description": "",
        "tags": ["Transformations"],
        "responses": {
          "200": {
            "description": "List of transformations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformationPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "description": "Filter by transformation IDs"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[A-z0-9-_]+$",
                  "maxLength": 155,
                  "nullable": true
                },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155,
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155,
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155,
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155,
                      "nullable": true
                    },
                    "any": { "type": "boolean" },
                    "contains": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155,
                      "nullable": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by transformation name"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255, "enum": ["created_at"] },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "transformation",
        "x-fern-sdk-method-name": "list"
      },
      "post": {
        "operationId": "createTransformation",
        "summary": "Create a transformation",
        "description": "",
        "tags": ["Transformations"],
        "responses": {
          "200": {
            "description": "A single transformation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Transformation" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "transformation",
        "x-fern-sdk-method-name": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "A unique, human-friendly name for the transformation"
                  },
                  "code": {
                    "type": "string",
                    "description": "JavaScript code to be executed as string"
                  },
                  "env": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": {
                      "anyOf": [
                        { "type": "string" },
                        { "type": "number", "format": "float" }
                      ]
                    },
                    "description": "Key-value environment variables to be passed to the transformation",
                    "x-docs-force-simple-type": true
                  }
                },
                "required": ["name", "code"],
                "additionalProperties": false
              }
            }
          }
        }
      },
      "put": {
        "operationId": "upsertTransformation",
        "summary": "Update or create a transformation",
        "description": "",
        "tags": ["Transformations"],
        "responses": {
          "200": {
            "description": "A single transformation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Transformation" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "transformation",
        "x-fern-sdk-method-name": "upsert",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "A unique, human-friendly name for the transformation"
                  },
                  "code": {
                    "type": "string",
                    "description": "JavaScript code to be executed as string"
                  },
                  "env": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": {
                      "anyOf": [
                        { "type": "string" },
                        { "type": "number", "format": "float" }
                      ]
                    },
                    "description": "Key-value environment variables to be passed to the transformation",
                    "x-docs-force-simple-type": true
                  }
                },
                "required": ["name", "code"],
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/transformations/{id}": {
      "get": {
        "operationId": "getTransformation",
        "summary": "Get a transformation",
        "description": "",
        "tags": ["Transformations"],
        "responses": {
          "200": {
            "description": "A single transformation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Transformation" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Transformation ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "transformation",
        "x-fern-sdk-method-name": "retrieve"
      },
      "put": {
        "operationId": "updateTransformation",
        "summary": "Update a transformation",
        "description": "",
        "tags": ["Transformations"],
        "responses": {
          "200": {
            "description": "A single transformation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Transformation" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Transformation ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "transformation",
        "x-fern-sdk-method-name": "update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "description": "A unique, human-friendly name for the transformation"
                  },
                  "code": {
                    "type": "string",
                    "description": "JavaScript code to be executed"
                  },
                  "env": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": {
                      "anyOf": [
                        { "type": "string" },
                        { "type": "number", "format": "float" }
                      ]
                    },
                    "description": "Key-value environment variables to be passed to the transformation",
                    "x-docs-force-simple-type": true
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/transformations/run": {
      "put": {
        "operationId": "testTransformation",
        "summary": "Test a transformation code",
        "description": "",
        "tags": ["Transformations"],
        "responses": {
          "200": {
            "description": "Transformation run output",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformationExecutorOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "transformation",
        "x-fern-sdk-method-name": "run",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "env": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "description": "Key-value environment variables to be passed to the transformation",
                    "x-docs-force-simple-type": true
                  },
                  "webhook_id": {
                    "type": "string",
                    "description": "ID of the connection to use for the execution `context`"
                  },
                  "code": {
                    "type": "string",
                    "description": "JavaScript code to be executed"
                  },
                  "transformation_id": {
                    "type": "string",
                    "description": "Transformation ID"
                  },
                  "request": {
                    "type": "object",
                    "properties": {
                      "headers": {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": { "type": "string" },
                        "description": "Headers of the request",
                        "x-docs-force-simple-type": true,
                        "x-docs-type": "JSON"
                      },
                      "body": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "x-docs-force-simple-type": true,
                            "x-docs-type": "JSON"
                          },
                          { "type": "string" }
                        ],
                        "description": "Body of the request",
                        "x-docs-force-simple-type": true
                      },
                      "path": {
                        "type": "string",
                        "nullable": true,
                        "description": "Path of the request"
                      },
                      "query": {
                        "type": "string",
                        "nullable": true,
                        "description": "String representation of the query params of the request"
                      },
                      "parsed_query": {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": false,
                        "description": "JSON representation of the query params",
                        "x-docs-force-simple-type": true,
                        "x-docs-type": "JSON"
                      }
                    },
                    "required": ["headers"],
                    "additionalProperties": false,
                    "description": "Request input to use for the transformation execution"
                  },
                  "event_id": { "type": "string", "x-docs-hide": true }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/transformations/{id}/executions": {
      "get": {
        "operationId": "getTransformationExecutions",
        "summary": "Get transformation executions",
        "description": "",
        "tags": ["Transformations"],
        "responses": {
          "200": {
            "description": "List of transformation executions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformationExecutionPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "log_level",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": ["debug", "info", "warn", "error", "fatal"],
                  "nullable": true
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["debug", "info", "warn", "error", "fatal"],
                    "nullable": true
                  }
                }
              ],
              "description": "Log level of the execution"
            }
          },
          {
            "in": "query",
            "name": "webhook_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "description": "ID of the connection the execution was run for"
            }
          },
          {
            "in": "query",
            "name": "issue_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "description": "ID of the associated issue"
            }
          },
          {
            "in": "query",
            "name": "created_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                {
                  "type": "object",
                  "properties": {
                    "gt": { "type": "string", "format": "date-time" },
                    "gte": { "type": "string", "format": "date-time" },
                    "le": { "type": "string", "format": "date-time" },
                    "lte": { "type": "string", "format": "date-time" },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "ISO date of the transformation's execution"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255, "enum": ["created_at"] },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": ["created_at"]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Transformation ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "transformation",
        "x-fern-sdk-method-name": "listExecution"
      }
    },
    "/transformations/{id}/executions/{execution_id}": {
      "get": {
        "operationId": "getTransformationExecution",
        "summary": "Get a transformation execution",
        "description": "",
        "tags": ["Transformations"],
        "responses": {
          "200": {
            "description": "A single transformation execution",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformationExecution"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Transformation ID" },
            "required": true
          },
          {
            "in": "path",
            "name": "execution_id",
            "schema": { "type": "string", "description": "Execution ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "transformation",
        "x-fern-sdk-method-name": "retrieveExecution"
      }
    },
    "/connections": {
      "get": {
        "operationId": "getConnections",
        "summary": "Get connections",
        "description": "",
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "List of connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "description": "Filter by connection IDs"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[A-z0-9-_]+$",
                  "maxLength": 155,
                  "nullable": true
                },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155,
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155,
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155,
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155,
                      "nullable": true
                    },
                    "any": { "type": "boolean" },
                    "contains": {
                      "type": "string",
                      "pattern": "^[A-z0-9-_]+$",
                      "maxLength": 155,
                      "nullable": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Filter by connection name"
            }
          },
          {
            "in": "query",
            "name": "destination_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "description": "Filter by associated destination IDs"
            }
          },
          {
            "in": "query",
            "name": "source_id",
            "schema": {
              "anyOf": [
                { "type": "string", "maxLength": 255 },
                {
                  "type": "array",
                  "items": { "type": "string", "maxLength": 255 }
                }
              ],
              "description": "Filter by associated source IDs"
            }
          },
          {
            "in": "query",
            "name": "archived",
            "schema": {
              "type": "boolean",
              "description": "Include archived resources in the response"
            }
          },
          {
            "in": "query",
            "name": "archived_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Date the connection was archived"
            }
          },
          {
            "in": "query",
            "name": "full_name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9-_>\\s]+$",
              "maxLength": 155,
              "description": "Fuzzy match the concatenated source and connection name. The source name and connection name must be separated by \" -> \""
            }
          },
          {
            "in": "query",
            "name": "paused_at",
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time", "nullable": true },
                {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "gte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "le": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "lte": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "any": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "description": "Date the connection was paused"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255,
                  "enum": [
                    "created_at",
                    "updated_at",
                    "sources.updated_at",
                    "sources.created_at",
                    "destinations.updated_at",
                    "destinations.created_at"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 255,
                    "enum": [
                      "created_at",
                      "updated_at",
                      "sources.updated_at",
                      "sources.created_at",
                      "destinations.updated_at",
                      "destinations.created_at"
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort key(s)"
            }
          },
          {
            "in": "query",
            "name": "dir",
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["asc", "desc"] },
                {
                  "type": "array",
                  "items": { "type": "string", "enum": ["asc", "desc"] },
                  "minItems": 2,
                  "maxItems": 2
                }
              ],
              "description": "Sort direction(s)"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Result set size"
            }
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the next set of results"
            }
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string",
              "maxLength": 255,
              "description": "The ID to provide in the query to get the previous set of results"
            }
          }
        ],
        "x-fern-sdk-group-name": "connection",
        "x-fern-sdk-method-name": "list"
      },
      "post": {
        "operationId": "createConnection",
        "summary": "Create a connection",
        "description": "",
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "A single connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connection" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "connection",
        "x-fern-sdk-method-name": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "nullable": true,
                    "description": "A unique name of the connection for the source"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "nullable": true,
                    "description": "Description for the connection"
                  },
                  "destination_id": {
                    "type": "string",
                    "maxLength": 255,
                    "nullable": true,
                    "description": "ID of a destination to bind to the connection"
                  },
                  "source_id": {
                    "type": "string",
                    "maxLength": 255,
                    "nullable": true,
                    "description": "ID of a source to bind to the connection"
                  },
                  "destination": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[A-z0-9-_]+$",
                        "maxLength": 155,
                        "description": "Name for the destination"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 500,
                        "nullable": true,
                        "description": "Description for the destination"
                      },
                      "url": {
                        "type": "string",
                        "nullable": true,
                        "description": "Endpoint of the destination",
                        "format": "URL"
                      },
                      "cli_path": {
                        "type": "string",
                        "nullable": true,
                        "description": "Path for the CLI destination"
                      },
                      "rate_limit_period": {
                        "type": "string",
                        "enum": ["second", "minute", "hour"],
                        "nullable": true,
                        "description": "Period to rate limit attempts"
                      },
                      "rate_limit": {
                        "type": "integer",
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "description": "When rate limit period is set to \"seconds\""
                          },
                          {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 6000,
                            "description": "When rate limit period is set to \"minute\""
                          },
                          {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 360000,
                            "description": "When rate limit period is set to \"hour\""
                          }
                        ],
                        "nullable": true,
                        "description": "Limit event attempts to receive per period",
                        "x-docs-type": "integer"
                      },
                      "http_method": {
                        "$ref": "#/components/schemas/DestinationHTTPMethod"
                      },
                      "auth_method": {
                        "$ref": "#/components/schemas/DestinationAuthMethodConfig"
                      },
                      "path_forwarding_disabled": { "type": "boolean" }
                    },
                    "required": ["name"],
                    "additionalProperties": false,
                    "description": "Destination input object"
                  },
                  "source": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[A-z0-9-_]+$",
                        "maxLength": 155,
                        "description": "A unique name for the source"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 500,
                        "nullable": true,
                        "description": "Description for the source"
                      },
                      "allowed_http_methods": {
                        "$ref": "#/components/schemas/SourceAllowedHTTPMethod"
                      },
                      "custom_response": {
                        "$ref": "#/components/schemas/SourceCustomResponse"
                      },
                      "verification": {
                        "$ref": "#/components/schemas/VerificationConfig"
                      }
                    },
                    "required": ["name"],
                    "additionalProperties": false,
                    "description": "Source input object"
                  },
                  "rules": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Rule" }
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      },
      "put": {
        "operationId": "upsertConnection",
        "summary": "Update or create a connection",
        "description": "",
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "A single connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connection" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [],
        "x-fern-sdk-group-name": "connection",
        "x-fern-sdk-method-name": "upsert",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "nullable": true,
                    "description": "A unique name of the connection for the source"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "nullable": true,
                    "description": "Description for the connection"
                  },
                  "destination_id": {
                    "type": "string",
                    "maxLength": 255,
                    "nullable": true,
                    "description": "ID of a destination to bind to the connection"
                  },
                  "source_id": {
                    "type": "string",
                    "maxLength": 255,
                    "nullable": true,
                    "description": "ID of a source to bind to the connection"
                  },
                  "destination": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[A-z0-9-_]+$",
                        "maxLength": 155,
                        "description": "Name for the destination"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 500,
                        "nullable": true,
                        "description": "Description for the destination"
                      },
                      "url": {
                        "type": "string",
                        "nullable": true,
                        "description": "Endpoint of the destination",
                        "format": "URL"
                      },
                      "cli_path": {
                        "type": "string",
                        "nullable": true,
                        "description": "Path for the CLI destination"
                      },
                      "rate_limit_period": {
                        "type": "string",
                        "enum": ["second", "minute", "hour"],
                        "nullable": true,
                        "description": "Period to rate limit attempts"
                      },
                      "rate_limit": {
                        "type": "integer",
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "description": "When rate limit period is set to \"seconds\""
                          },
                          {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 6000,
                            "description": "When rate limit period is set to \"minute\""
                          },
                          {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 360000,
                            "description": "When rate limit period is set to \"hour\""
                          }
                        ],
                        "nullable": true,
                        "description": "Limit event attempts to receive per period",
                        "x-docs-type": "integer"
                      },
                      "http_method": {
                        "$ref": "#/components/schemas/DestinationHTTPMethod"
                      },
                      "auth_method": {
                        "$ref": "#/components/schemas/DestinationAuthMethodConfig"
                      },
                      "path_forwarding_disabled": { "type": "boolean" }
                    },
                    "required": ["name"],
                    "additionalProperties": false,
                    "description": "Destination input object"
                  },
                  "source": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[A-z0-9-_]+$",
                        "maxLength": 155,
                        "description": "A unique name for the source"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 500,
                        "nullable": true,
                        "description": "Description for the source"
                      },
                      "allowed_http_methods": {
                        "$ref": "#/components/schemas/SourceAllowedHTTPMethod"
                      },
                      "custom_response": {
                        "$ref": "#/components/schemas/SourceCustomResponse"
                      },
                      "verification": {
                        "$ref": "#/components/schemas/VerificationConfig"
                      }
                    },
                    "required": ["name"],
                    "additionalProperties": false,
                    "description": "Source input object"
                  },
                  "rules": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Rule" }
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/connections/{id}": {
      "get": {
        "operationId": "getConnection",
        "summary": "Get a single connection",
        "description": "",
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "A single connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connection" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Connection ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "connection",
        "x-fern-sdk-method-name": "retrieve"
      },
      "put": {
        "operationId": "updateConnection",
        "summary": "Update a connection",
        "description": "",
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "A single connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connection" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Connection ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "connection",
        "x-fern-sdk-method-name": "update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[A-z0-9-_]+$",
                    "maxLength": 155,
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "nullable": true,
                    "description": "Description for the connection"
                  },
                  "rules": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Rule" }
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteConnection",
        "summary": "Delete a connection",
        "description": "",
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "A single connection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the connection"
                    }
                  },
                  "required": ["id"],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "connection",
        "x-fern-sdk-method-name": "delete"
      }
    },
    "/connections/{id}/archive": {
      "put": {
        "operationId": "archiveConnection",
        "summary": "Archive a connection",
        "description": "",
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "A single connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connection" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Connection ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "connection",
        "x-fern-sdk-method-name": "archive"
      }
    },
    "/connections/{id}/unarchive": {
      "put": {
        "operationId": "unarchiveConnection",
        "summary": "Unarchive a connection",
        "description": "",
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "A single connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connection" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Connection ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "connection",
        "x-fern-sdk-method-name": "unarchive"
      }
    },
    "/connections/{id}/pause": {
      "put": {
        "operationId": "pauseConnection",
        "summary": "Pause a connection",
        "description": "",
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "A single connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connection" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Connection ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "connection",
        "x-fern-sdk-method-name": "pause"
      }
    },
    "/connections/{id}/unpause": {
      "put": {
        "operationId": "unpauseConnection",
        "summary": "Unpause a connection",
        "description": "",
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "A single connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connection" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIErrorResponse" }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "description": "Connection ID" },
            "required": true
          }
        ],
        "x-fern-sdk-group-name": "connection",
        "x-fern-sdk-method-name": "unpause"
      }
    }
  }
}
